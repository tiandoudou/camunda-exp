{"version":3,"sources":["text!base/app/views/dashboard/process-definitions.html","base/app/views/dashboard/process-definitions.js","text!base/app/views/processDefinition/process-instance-table.html","base/app/views/processDefinition/processInstanceTable.js","text!base/app/views/processDefinition/called-process-definition-table.html","base/app/views/processDefinition/calledProcessDefinitionTable.js","text!base/app/views/processDefinition/update-suspension-state-action.html","text!base/app/views/processDefinition/update-suspension-state-dialog.html","base/app/views/processDefinition/updateSuspensionStateAction.js","base/app/views/processDefinition/updateSuspensionStateDialog.js","text!base/app/views/processDefinition/activity-instance-statistics-overlay.html","base/app/views/processDefinition/activityInstanceStatisticsOverlay.js","text!base/app/views/processInstance/variable-instance-upload-dialog.html","text!base/app/views/processInstance/variable-instance-inspect-dialog.html","text!base/app/views/processInstance/variable-instances-tab.html","base/app/views/processInstance/variableInstancesTab.js","base/app/views/processInstance/variableInstanceUploadDialog.js","base/app/views/processInstance/variableInstanceInspectDialog.js","text!base/app/views/processInstance/incidents-tab.html","text!base/app/views/processInstance/job-retry-dialog.html","base/app/views/processInstance/incidentsTab.js","text!base/app/views/processInstance/called-process-instance-table.html","base/app/views/processInstance/calledProcessInstanceTable.js","text!base/app/views/processInstance/identity-links-modal.html","text!base/app/views/processInstance/user-tasks-table.html","base/app/views/processInstance/userTasksTable.js","text!base/app/views/processInstance/job-retry-bulk-dialog.html","text!base/app/views/processInstance/job-retry-bulk-action.html","base/app/views/processInstance/jobRetryBulkAction.js","base/app/views/processInstance/jobRetryBulkDialog.js","base/app/views/processInstance/jobRetryDialog.js","text!base/app/views/processInstance/cancel-process-instance-dialog.html","text!base/app/views/processInstance/cancel-process-instance-action.html","base/app/views/processInstance/cancelProcessInstanceAction.js","base/app/views/processInstance/cancelProcessInstanceDialog.js","text!base/app/views/processInstance/add-variable-action.html","text!base/app/views/processInstance/add-variable-dialog.html","base/app/views/processInstance/addVariableAction.js","base/app/views/processInstance/addVariableDialog.js","text!base/app/views/processInstance/update-suspension-state-action.html","text!base/app/views/processInstance/update-suspension-state-dialog.html","base/app/views/processInstance/updateSuspensionStateAction.js","base/app/views/processInstance/updateSuspensionStateDialog.js","text!base/app/views/processInstance/activity-instance-statistics-overlay.html","base/app/views/processInstance/activityInstanceStatisticsOverlay.js","base/app/views/main.js","base/app/resources/processDefinition.js","base/app/resources/processInstance.js","base/app/resources/main.js","base/app/data/dashboard/processDefinitionStatisticsData.js","base/app/data/processDefinition/activityInstanceStatisticsData.js","base/app/data/main.js","base/app/plugin.js"],"names":["define","template","ViewsProvider","registerDefaultView","id","label","dashboardMenuLabel","controller","$scope","Views","processInstancePlugins","getProviders","component","hasHistoryPlugin","filter","plugin","length","processData","newChild","orderByPredicate","orderByReverse","observe","processDefinitionStatistics","statistics","selected","selectTab","which","priority","angular","$location","search","routeUtil","PluginProcessInstanceResource","updateView","newFilter","copy","page","scrollToBpmnElement","pages","current","count","size","firstResult","defaultParams","processDefinitionId","processDefinition","pagingParams","maxResults","sortBy","sortOrder","countParams","extend","activityIdIn","activityIds","forEach","start","dateFilter","value","type","startedAfter","startedBefore","params","processInstances","loadingState","query","$promise","then","data","total","DEFAULT_PAGES","$watch","newValue","oldValue","getProcessInstanceUrl","processInstance","path","searches","keepSearchParams","i","push","redirectTo","$q","PluginProcessDefinitionResource","attachCalledFromActivities","processDefinitions","bpmnElements","result","d","calledFromActivityIds","calledFromActivities","activityId","bpmnElement","activity","name","provide","superProcessDefinitionId","parentProcessDefinitionId","getCalledProcessDefinitions","calledProcessDefinitions","actionTemplate","dialogTemplate","$rootScope","$modal","openDialog","dialog","open","resolve","status","executeImmediately","suspended","$broadcast","set","$http","$filter","Uri","Notifications","$modalInstance","BEFORE_UPDATE","PERFORM_UPDATE","UPDATE_SUCCESS","UPDATE_FAILED","dateFormat","includeInstances","executionDate","Date","now","$on","close","updateSuspensionState","includeProcessInstances","put","appUri","success","addMessage","message","exclusive","error","response","addError","isValid","formScope","element","scope","updateSuspensionStateForm","$valid","activityInstanceStatistics","activityInstance","isSelectable","currentFilter","selectRunningInstances","e","ctrl","ctrlKey","idx","indexOf","splice","uploadTemplate","inspectTemplate","instancesTemplate","ngModule","$sce","LocalExecutionVariableResource","camAPI","instanceIdToInstanceMap","processInstanceIdIn","deserializeValues","activityInstanceIdIn","activityInstanceIds","variables","post","variableInstanceIdexceptionMessageMap","variableCopies","map","item","instance","activityInstanceId","variable","valueInfo","executionId","original","additions","html","scopeVariables","variableInstanceData","executionService","resource","taskService","uploadVariable","info","promise","defer","variableInstance","reject","deleteVariable","callback","duration","taskId","varId","editVariable","windowClass","saveVariable","modifiedVariable","newType","newVariable","modifyVariables","modifications","getCopy","variableId","isNull","getBinaryVariableDownloadLink","openUploadDialog","openInspectDialog","Configuration","$inject","config","BEFORE_UPLOAD","PERFORM_UPLOAD","UPLOAD_SUCCESS","UPLOAD_FAILED","variableType","upload","uploadProgress","evt","$apply","lengthComputable","progress","Math","round","loaded","uploadComplete","uploadFailed","fd","FormData","append","file","xhr","XMLHttpRequest","addEventListener","getVariableUploadUrl","send","setFile","files","parsedValue","self","CHANGE_SUCCESS","BEFORE_CHANGE","responseText","CONFIRM_CHANGE","selectedTab","initialValue","objectType","objectTypeName","dataFormat","serializationDataFormat","initialValueDeserialized","deserializationError","currentValue","currentValueDeserialized","confirmed","typeIn","hasChanged","change","updateDeserialized","JSON","parse","Blob","getSerializableVariableUploadUrl","variableUpdate","method","url","getObjectVariablePutUrl","headers","errorMessage","stringify","$scpe","deserializedValue","tab","dismiss","incidentsTemplate","retryTemplate","activityIdToInstancesMap","incidents","incident","activityName","linkable","incidentData","getIncidentType","incidentType","getJobStacktraceUrl","rootCauseIncidentConfiguration","openJobRetryDialog","calledProcessInstances","calledInstance","callActivityInstanceId","calledProcessInstanceData","identityLinksTemplate","userTasksTemplate","array","cb","newArray","val","key","compact","ensureCallback","func","isFunction","noop","TaskResource","executionIdToInstanceMap","processInstanceId","definitionId","userTasks","taskIdIdToExceptionMessageMap","taskCopies","task","userTaskData","Task","getHref","userTask","submitAssigneeChange","editForm","context","userId","setAssignee","assignee","err","decorator","identityLinks","ok","changeGroupIdentityLinks","this","title","table","add","notifications","remove","changeUserIdentityLinks","getExceptionForUserTask","removeItem","delta","identityLinksDelete","identityLink","g","invalid","$invalid","exists","newItem","$modelValue","addItem","newIdentityLink","identityLinksAdd","JobResource","updateJobTable","failedJobs","allJobsSelected","jobPages","withException","noRetriesLeft","job","jobIdToFailedJobMap","index","selectedFailedJobIds","updateSummarizeTable","summarizePages","showJobsRetried","jobId","doRetry","retryJob","PERFORM","setRetries","retries","SUCCESS","deferred","finishedWithFailures","FAILED","retryError","retryFailed","jobRetriesData","FINISHED","executionMap","selectAllJobs","selectFailedJob","failedJob","retryFailedJobs","incrementRetry","configuration","ProcessInstanceResource","BEFORE_CANCEL","PERFORM_CANCEL","CANCEL_SUCCESS","CANCEL_FAILED","cancelProcessInstanceData","superProcessInstance","subProcessInstancesCount","subProcessInstances","cancelProcessInstance","$delete","historyProvider","getProvider","replace","variableTypes","PERFORM_SAVE","FAIL","addVariableForm","save","activityIdToIncidentsMap","instances","processInstanceTable","calledProcessDefinitionTable","updateSuspensionStateAction","updateSuspensionStateDialog","activityInstanceStatisticsOverlay","variableInstancesTab","variableInstanceUploadDialog","variableInstanceInspectDialog","incidentsTab","calledProcessInstanceTable","userTasksTable","jobRetryBulkAction","jobRetryBulkDialog","jobRetryDialog","cancelProcessInstanceAction","cancelProcessInstanceDialog","addVariableAction","addVariableDialog","updateSuspensionStateActionPI","updateSuspensionStateDialogPI","activityInstanceStatisticsOverlayPI","module","$resource","isArray","action","delete","getCalledProcessInstances","factory","Controller","ProcessDefinitionResource","queryStatistics","aggregateStatistics","statisticsResult","currentStatistic","statistic","definition","currentInstances","currentFailedJobs","currentIncidents","version","incidentCount","newIncident","statisticIncident","DataProvider","registerData","queryActivityStatistics","viewsModule","resourcesModule","dataModule"],"mappings":"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DACA,SAAA4B,EAAAiB,EAAAqG,GAEA,GAAAa,GAAAnI,EAAAgZ,OAAA,8BAKA,OAHA7Q,GAAAuD,OAAAzK,GACAkH,EAAAuD,OAAApE,GAEAa,ICDA/J,OAAA,mBAAA,UACA,eACA,mBACA,eACA,SAAA4B,EAAAya,EAAAC,EAAAC,GACA,MAAA3a,GAAAgZ,OAAA,uBAAAyB,EAAAxW,KAAAyW,EAAAzW,KAAA0W,EAAA1W;AnDdA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACnHA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACxEA;AACA;AACA;AACA,ACHA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AChGA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC3EA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA,ACHA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxTA,ADyTA;ACxvprtNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/CA;AACA;AACA;ACFA,ADGA;ACFA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACrzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACjFA;AACA;AACA;AACA,ACHA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,AC5DA;AACA;AACA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzEA,AD0EA;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/FA,ADgGA;AC/FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7CA,AD8CA;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA,ADcA;ACbvHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA,ADwBA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"plugin.js","sourcesContent":["\ndefine('text!base/app/views/dashboard/process-definitions.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/dashboard/process-definitions.html -->\\n<div class=\"deployed-processes\">\\n  <h3 ng-if=\"statistics && statistics.length\">\\n    {{ statistics.length }} process {{ (statistics.length > 1 ? \\'definitions\\' : \\'definition\\') }} deployed\\n  </h3>\\n\\n  <tabset ng-if=\"statistics && statistics.length\">\\n    <tab heading=\"List\"\\n         select=\"selectTab(\\'list\\')\">\\n      <table class=\"process-definitions-list cam-table\">\\n        <thead>\\n          <tr>\\n            <th class=\"state\">State</th>\\n            <th class=\"instances\">Running Instances</th>\\n            <th class=\"name\">Name</th>\\n            <th ng-if=\"hasHistoryPlugin\"\\n                class=\"history-link\">History view</th>\\n          </tr>\\n        </thead>\\n\\n        <tbody>\\n          <tr ng-repeat=\"statistic in statistics | orderBy:orderByPredicate:orderByReverse\">\\n            <td class=\"state\">\\n              <div state-circle\\n                   incidents=\"statistic.incidents\"></div>\\n            </td>\\n\\n            <td class=\"instances\">\\n              {{ statistic.instances }}\\n            </td>\\n\\n            <td class=\"name\">\\n              <a href=\"#/process-definition/{{ statistic.definition.id }}\">\\n                {{ statistic.definition.name }}\\n              </a>\\n            </td>\\n\\n            <td ng-if=\"hasHistoryPlugin\"\\n                class=\"history-link\">\\n              <a href=\"#/process-definition/{{ statistic.definition.id }}/history\">\\n                History view\\n              </a>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </tab><!-- / list tab -->\\n\\n    <tab heading=\"Previews\"\\n         select=\"selectTab(\\'previews\\')\">\\n      <div class=\"tile-grid\">\\n        <div ng-repeat=\"statistic in statistics | orderBy:orderByPredicate:orderByReverse\"\\n             class=\"tile\">\\n          <a href=\"#/process-definition/{{ statistic.definition.id }}\">\\n            <h4 class=\"tile-header\">\\n              {{ statistic.definition.name }}\\n            </h4>\\n\\n            <span class=\"tile-body\">\\n              <span ng-if=\"selected === \\'previews\\'\"\\n                    process-diagram-preview\\n                    process-definition-id=\"statistic.definition.id\"></span>\\n            </span>\\n\\n            <span class=\"tile-footer\">\\n              <span class=\"instances\">\\n                {{ (statistic.instances < 1 ? \\'No\\' : statistic.instances) }}\\n                running\\n                {{ ((statistic.instances === 1 || statistic.instances === \\'1\\') ? \\'instance\\' : \\'instances\\') }}\\n              </span>\\n\\n              <span state-circle\\n                    incidents=\"statistic.incidents\"\\n                    class=\"circle-tiles\"></span>\\n            </span>\\n          </a>\\n        </div>\\n      </div>\\n    </tab><!-- grid tab -->\\n  </tabset>\\n\\n  <h3 ng-if=\"!statistics || !statistics.length\">\\n    No process definitions deployed\\n  </h3>\\n\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/dashboard/process-definitions.html -->\\n';});\n\n","define('base/app/views/dashboard/process-definitions',[\n  'text!./process-definitions.html'\n], function(\n  template\n) {\n  'use strict';\n\n  return [ 'ViewsProvider', function (ViewsProvider) {\n    ViewsProvider.registerDefaultView('cockpit.dashboard', {\n      id: 'process-definition',\n      label: 'Deployed Process Definitions',\n      dashboardMenuLabel: 'BPMN Processes',\n      template: template,\n      controller: [\n              '$scope',\n              'Views',\n      function($scope, Views) {\n        var processInstancePlugins = Views.getProviders({ component: 'cockpit.processInstance.view' });\n        $scope.hasHistoryPlugin = processInstancePlugins.filter(function(plugin) {\n          return plugin.id === 'history';\n        }).length > 0;\n\n        var processData = $scope.processData.newChild($scope);\n\n        $scope.orderByPredicate = 'definition.name';\n        $scope.orderByReverse = false;\n\n        processData.observe('processDefinitionStatistics', function (processDefinitionStatistics) {\n          $scope.statistics = processDefinitionStatistics;\n        });\n\n        $scope.selected = 'list';\n        $scope.selectTab = function (which) {\n          $scope.selected = which;\n        };\n      }],\n\n      priority: 0\n    });\n  }];\n});\n\n","\ndefine('text!base/app/views/processDefinition/process-instance-table.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/process-instance-table.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No process instances matched by current filter.\">\\n  <table class=\"process-instances cam-table\">\\n    <thead>\\n      <tr>\\n        <th class=\"state\">State</th>\\n        <th class=\"instance-id uuid\">ID</th>\\n        <th class=\"start-time\">Start Time</th>\\n        <th class=\"business-key\">Business Key</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr ng-repeat=\"processInstance in processInstances\">\\n        <td class=\"state\">\\n          <a state-circle\\n             incidents=\"processInstance.incidents\"\\n             ng-href=\"{{ getProcessInstanceUrl(processInstance, { detailsTab: \\'incidents-tab\\' }) }}\"></a>\\n          <span class=\"badge badge-warning badge-suspended\"\\n                ng-show=\"processInstance.suspended\"\\n                tooltip=\"Currently suspended\"\\n                tooltip-placement=\"left\">\\n            <span class=\"glyphicon glyphicon-pause white\"></span>\\n          </span>\\n        </td>\\n\\n        <td class=\"instance-id uuid\">\\n          <a ng-href=\"{{ getProcessInstanceUrl(processInstance) }}\" title=\"{{ processInstance.id }}\">\\n            {{ processInstance.id }}\\n          </a>\\n        </td>\\n\\n        <td class=\"start-time\">\\n          {{ processInstance.startTime | camDate }}\\n        </td>\\n\\n        <td class=\"business-key\">\\n          {{ processInstance.businessKey }}\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n\\n  <pagination ng-if=\"pages.total > pages.size\"\\n              class=\"pagination-sm\"\\n\\n              page=\"pages.current\"\\n              ng-model=\"pages.current\"\\n\\n              total-items=\"pages.total\"\\n              items-per-page=\"pages.size\"\\n\\n              max-size=\"7\"\\n              boundary-links=\"true\"></pagination>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/process-instance-table.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processDefinition/processInstanceTable',[\n  'angular',\n  'text!./process-instance-table.html'\n],\nfunction(angular, template) {\n  'use strict';\n\n  return [ 'ViewsProvider', function(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('cockpit.processDefinition.runtime.tab', {\n      id: 'process-instances-table',\n      label: 'Process Instances',\n      template: template,\n      controller: [\n               '$scope', '$location', 'search', 'routeUtil', 'PluginProcessInstanceResource',\n      function ($scope,   $location,   search,   routeUtil,   PluginProcessInstanceResource) {\n\n        var processData = $scope.processData.newChild($scope);\n\n        var processDefinition = $scope.processDefinition;\n\n        var DEFAULT_PAGES = { size: 50, total: 0, current: 1 };\n\n        var pages = $scope.pages = angular.copy(DEFAULT_PAGES);\n\n        var filter = null;\n\n        $scope.$watch('pages.current', function(newValue, oldValue) {\n          if (newValue == oldValue) {\n            return;\n          }\n\n          search('page', !newValue || newValue == 1 ? null : newValue);\n        });\n\n        processData.observe('filter', function(newFilter) {\n          pages.current = newFilter.page || 1;\n\n          updateView(newFilter);\n        });\n\n        function updateView(newFilter) {\n\n          filter = angular.copy(newFilter);\n\n          delete filter.page;\n          delete filter.scrollToBpmnElement;\n\n          var page = pages.current,\n              count = pages.size,\n              firstResult = (page - 1) * count;\n\n          var defaultParams = {\n            processDefinitionId: processDefinition.id\n          };\n\n          var pagingParams = {\n            firstResult: firstResult,\n            maxResults: count,\n            sortBy: 'startTime',\n            sortOrder: 'desc'\n          };\n\n          var countParams = angular.extend({}, filter, defaultParams);\n\n          // fix missmatch -> activityIds -> activityIdIn\n          countParams.activityIdIn = countParams.activityIds;\n          delete countParams.activityIds;\n\n          // fix missmatch -> start -> startedAfter/startedBefore\n          angular.forEach(countParams.start, function (dateFilter) {\n            if (dateFilter.value) {\n              if (dateFilter.type === 'after') {\n                countParams.startedAfter = dateFilter.value;\n              } else if (dateFilter.type === 'before') {\n                countParams.startedBefore = dateFilter.value;\n              }\n            }\n          });\n          delete countParams.start;\n\n          var params = angular.extend({}, countParams, pagingParams);\n\n          $scope.processInstances = null;\n          $scope.loadingState = 'LOADING';\n\n          PluginProcessInstanceResource.query(pagingParams, params).$promise.then(function(data) {\n            $scope.processInstances = data;\n            $scope.loadingState = data.length ? 'LOADED' : 'EMPTY';\n          });\n\n          PluginProcessInstanceResource.count(countParams).$promise.then(function(data) {\n            pages.total = data.count;\n          });\n        }\n\n        $scope.getProcessInstanceUrl = function(processInstance, params) {\n          var path = '#/process-instance/' + processInstance.id;\n          var searches = angular.extend({}, ($location.search() || {}), (params || {}));\n\n          var keepSearchParams = [ 'viewbox' ];\n          for (var i in params) {\n            keepSearchParams.push(i);\n          }\n\n          return routeUtil.redirectTo(path, searches, keepSearchParams);\n        };\n\n      }],\n      priority: 10\n    });\n  }];\n});\n\n","\ndefine('text!base/app/views/processDefinition/called-process-definition-table.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/called-process-definition-table.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No called process definitions\">\\n  <table class=\"called-process-definition cam-table\">\\n    <thead>\\n      <tr>\\n        <th class=\"process-definition\">Called Process Definition</th>\\n        <th class=\"activity\">Activity</th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      <tr ng-repeat=\"calledProcessDefinition in calledProcessDefinitions\">\\n        <td class=\"process-definition\">\\n          <a ng-href=\"#/process-definition/{{ calledProcessDefinition.id }}?parentProcessDefinitionId={{ processDefinition.id }}\">\\n            {{ calledProcessDefinition.name }}\\n          </a>\\n        </td>\\n\\n        <td class=\"activity\">\\n          <a ng-show=\"calledProcessDefinition.calledFromActivities.length === 1\"\\n             cam-select-activity=\"calledProcessDefinition.calledFromActivities[0].id\"\\n             ng-href=\"#/process-definition/{{ processDefinition.id }}?activityIds={{ calledProcessDefinition.calledFromActivities[0].id }}&amp;detailsTab=call-process-definitions-table\">\\n            {{ calledProcessDefinition.calledFromActivities[0].name }}\\n          </a>\\n\\n          <ul ng-show=\"calledProcessDefinition.calledFromActivities.length > 1\">\\n            <li ng-repeat=\"activity in calledProcessDefinition.calledFromActivities\">\\n              <a cam-select-activity=\"activity.id\"\\n                 ng-href=\"#/process-definition/{{ processDefinition.id }}?activityIds={{ activity.id }}&amp;detailsTab=call-process-definitions-table\">\\n                {{ activity.name }}\\n              </a>\\n            </li>\\n          <ul>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/called-process-definition-table.html -->\\n';});\n\n","/* global ngDefine: false, angular: false */\ndefine('base/app/views/processDefinition/calledProcessDefinitionTable',['angular', 'text!./called-process-definition-table.html'], function(angular, template) {\n  'use strict';\n\n  return [ 'ViewsProvider', function(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('cockpit.processDefinition.runtime.tab', {\n      id: 'call-process-definitions-table',\n      label: 'Called Process Definitions',\n      template: template,\n      controller: [\n              '$scope', '$location', '$q', 'PluginProcessDefinitionResource',\n      function($scope,   $location,   $q,   PluginProcessDefinitionResource) {\n\n        var filter;\n        var processData = $scope.processData.newChild($scope);\n\n        processData.provide('calledProcessDefinitions', [\n                'processDefinition', 'filter',\n        function(processDefinition,   newFilter) {\n\n          filter = angular.copy(newFilter);\n\n          delete filter.page;\n          delete filter.scrollToBpmnElement;\n\n          // the parent process definition id is the super process definition id...\n          filter.superProcessDefinitionId = filter.parentProcessDefinitionId;\n          // ...and the process definition id of the current view is the\n          // parent process definition id of query.\n          filter.parentProcessDefinitionId = $scope.processDefinition.id;\n\n          filter.activityIdIn = filter.activityIds;\n          delete filter.activityIds;\n\n          $scope.loadingState = 'LOADING';\n          return PluginProcessDefinitionResource.getCalledProcessDefinitions({ id: processDefinition.id }, filter).$promise;\n        }]);\n\n        processData.observe([ 'calledProcessDefinitions', 'bpmnElements' ], function(calledProcessDefinitions, bpmnElements) {\n\n          $scope.calledProcessDefinitions = attachCalledFromActivities(calledProcessDefinitions, bpmnElements);\n          $scope.loadingState = $scope.calledProcessDefinitions.length ? 'LOADED' : 'EMPTY';\n        });\n\n        function attachCalledFromActivities(processDefinitions, bpmnElements) {\n\n          var result = [];\n\n          angular.forEach(processDefinitions, function(d) {\n            var calledFromActivityIds = d.calledFromActivityIds,\n                calledFromActivities = [];\n\n            angular.forEach(calledFromActivityIds, function(activityId) {\n              var bpmnElement = bpmnElements[activityId];\n\n              var activity = { id: activityId, name: (bpmnElement && bpmnElement.name) || activityId };\n\n              calledFromActivities.push(activity);\n            });\n\n            result.push(angular.extend({}, d, { calledFromActivities: calledFromActivities }));\n          });\n\n          return result;\n        }\n      }],\n      priority: 5\n    });\n  }];\n});\n\n","\ndefine('text!base/app/views/processDefinition/update-suspension-state-action.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/update-suspension-state-action.html -->\\n<a class=\"btn btn-default btn-toolbar btn-suspend-action\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Suspend Process Definition\"\\n   tooltip-placement=\"left\"\\n   ng-show=\"!processDefinition.suspended\">\\n  <span class=\"glyphicon glyphicon-pause\"></span>\\n</a>\\n\\n<a class=\"btn btn-default btn-toolbar\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Activate Process Definition\"\\n   tooltip-placement=\"left\"\\n   ng-hide=\"!processDefinition.suspended\">\\n  <span class=\"glyphicon glyphicon-play\"></span>\\n</a>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/update-suspension-state-action.html -->\\n';});\n\n","\ndefine('text!base/app/views/processDefinition/update-suspension-state-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/update-suspension-state-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>{{ (processDefinition.suspended ? \\'Activate\\' : \\'Suspend\\') }} Process Definition</h3>\\n</div>\\n\\n<div class=\"process-definition update-suspension-state modal-body\">\\n  <div notifications-panel></div>\\n\\n  <div ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">\\n\\n    <p ng-show=\"processDefinition.suspended\">\\n      <!-- activation -->\\n      This process definition will be activated, so that it will be possible to start new process instances based on this process definition.\\n    </p>\\n\\n    <p ng-hide=\"processDefinition.suspended\">\\n      <!-- suspension -->\\n      This process definition will be suspended, so that it will not be possible to start new process instances based on this process definition.\\n    </p>\\n\\n    <form class=\"form-horizontal\"\\n          name=\"updateSuspensionStateForm\"\\n          novalidate\\n          request-aware\\n          ng-submit=\"updateSuspensionState()\">\\n      <fieldset>\\n        <div class=\"form-group\">\\n          <label class=\"control-label col-xs-4\"\\n                 for=\"includeInstancesValue\">Include Instances\\n            <!-- activation -->\\n            <span tooltip=\"Including the process instances means that all existing process instances of this process definition will be activated too, if the value is set to true.\"\\n                  tooltip-placement=\"right\"\\n                  ng-show=\"processDefinition.suspended\">\\n              <span class=\"glyphicon glyphicon-question-sign\"></span>\\n            </span>\\n\\n            <!-- suspension -->\\n            <span tooltip=\"Including the process instances means that all existing process instances of this process definition will be suspended too, if the value is set to true.\"\\n                  tooltip-placement=\"right\"\\n                  ng-hide=\"processDefinition.suspended\">\\n              <span class=\"glyphicon glyphicon-question-sign\"></span>\\n            </span>\\n          </label>\\n\\n          <div class=\"col-xs-8\">\\n            <label class=\"checkbox\">\\n              <input id=\"includeInstancesValueId\"\\n                     name=\"includeInstancesValue\"\\n                     type=\"checkbox\"\\n                     ng-model=\"data.includeInstances\">\\n            </label>\\n          </div>\\n        </div>\\n\\n        <div class=\"form-group\">\\n          <label class=\"control-label col-xs-4\" for=\"executeImmediately\">Execute\\n            <span tooltip=\"Decide whether the activation of this process definition should be executed immediately or delayed. If the activation should happen delayed then an execution date must be provided on which the activation will be scheduled.\"\\n                  tooltip-placement=\"right\"\\n                  ng-show=\"processDefinition.suspended\">\\n              <span class=\"glyphicon glyphicon-question-sign\"></span>\\n            </span>\\n            <span tooltip=\"Decide whether the suspension of this process definition should be executed immediately or delayed. If the suspension should happen delayed then an execution date must be provided on which the suspension will be scheduled.\"\\n                  tooltip-placement=\"right\"\\n                  ng-hide=\"processDefinition.suspended\">\\n              <span class=\"glyphicon glyphicon-question-sign\"></span>\\n            </span>\\n          </label>\\n\\n          <div class=\"col-xs-8\">\\n            <label class=\"radio\">\\n              <input ng-model=\"data.executeImmediately\"\\n                     ng-value=\"true\"\\n                     type=\"radio\"\\n                     name=\"execute\">\\n              Immediately\\n            </label>\\n\\n            <label class=\"radio\">\\n              <input ng-model=\"data.executeImmediately\"\\n                     ng-value=\"false\"\\n                     type=\"radio\"\\n                     name=\"execute\">\\n              Delayed\\n            </label>\\n          </div>\\n\\n          <label class=\"control-label col-xs-4\"\\n                 for=\"executionDateValue\"\\n                 ng-show=\"!data.executeImmediately\">\\n            Schedule at\\n          </label>\\n\\n          <div class=\"col-xs-8\"\\n               ng-show=\"!data.executeImmediately\">\\n            <input date\\n                   name=\"executionDateValue\"\\n                   ng-model=\"data.executionDate\"\\n                   type=\"text\"\\n                   required />\\n\\n            <p class=\"invalid\"\\n               ng-show=\"this.updateSuspensionStateForm.executionDateValue.$error.date\">\\n              Supported pattern \\'yyyy-MM-ddTHH:mm:ss\\'.\\n            </p>\\n          </div>\\n\\n        </div><!-- /.form-group -->\\n\\n      </fieldset>\\n    </form>\\n\\n    <p>\\n      Do you really want to {{ (processDefinition.suspended ? \\'activate\\' : \\'suspend\\') }} this process definition?\\n    </p>\\n\\n  </div>\\n\\n  <div ng-show=\"status === \\'SUCCESS\\'\">\\n    <p ng-show=\"processDefinition.suspended && data.executeImmediately\">\\n      The suspension state of the process definition has been updated to \"active\" successfully.\\n    </p>\\n    <p ng-show=\"processDefinition.suspended && !data.executeImmediately\">\\n      The activation of the process definition has been scheduled to {{ data.executionDate | camDate  }} successfully.\\n    </p>\\n    <p ng-show=\"!processDefinition.suspended && data.executeImmediately\">\\n      The suspension state of the process definition has been updated to \"suspended\" successfully.\\n    </p>\\n    <p ng-show=\"!processDefinition.suspended && !data.executeImmediately\">\\n      The suspension of the process definition has been scheduled to {{ data.executionDate | camDate  }} successfully.\\n    </p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'FAIL\\'\">\\n    <p ng-show=\"processDefinition.suspended && data.executeImmediately\">\\n      The suspension state of the process definition could not be updated to \"active\" successfully.\\n    </p>\\n    <p ng-show=\"processDefinition.suspended && !data.executeImmediately\">\\n      The activation of the process definition could not be scheduled to {{ data.executionDate | camDate  }} successfully.\\n    </p>\\n    <p ng-show=\"!processDefinition.suspended && data.executeImmediately\">\\n      The suspension state of the process definition could not be updated to \"suspended\" successfully.\\n    </p>\\n    <p ng-show=\"!processDefinition.suspended && !data.executeImmediately\">\\n      The suspension of the process definition could not be scheduled to {{ data.executionDate | camDate  }} successfully.\\n    </p>\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close(status)\"\\n          ng-disabled=\"status === \\'PERFORM_UDPATE\\'\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">\\n    Close\\n  </button>\\n\\n  <button type=\"submit\"\\n          class=\"btn btn-primary\"\\n          ng-click=\"updateSuspensionState()\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\"\\n          ng-disabled=\"!isValid() || status === \\'PERFORM_UDPATE\\'\">\\n    {{ (processDefinition.suspended ? \\'Activate\\' : \\'Suspend\\') }}\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close(status)\"\\n          ng-show=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">\\n    OK\\n  </button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/update-suspension-state-dialog.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processDefinition/updateSuspensionStateAction',['angular', 'text!./update-suspension-state-action.html', 'text!./update-suspension-state-dialog.html'], function(angular, actionTemplate, dialogTemplate) {\n  'use strict';\n  return ['ViewsProvider', function(ViewsProvider) {\n    ViewsProvider.registerDefaultView('cockpit.processDefinition.runtime.action', {\n      id: 'update-suspension-state-action',\n      label: 'Update Suspension State',\n      template: actionTemplate,\n      controller: [\n              '$scope', '$rootScope', '$modal',\n      function($scope,   $rootScope,   $modal) {\n\n        $scope.openDialog = function () {\n          var dialog = $modal.open({\n            resolve: {\n              processData: function() { return $scope.processData; },\n              processDefinition: function() { return $scope.processDefinition; }\n            },\n            controller: 'UpdateProcessDefinitionSuspensionStateController',\n            template: dialogTemplate\n          });\n\n          dialog.result.then(function(result) {\n\n            // dialog closed. YEA!\n            if (result.status === 'SUCCESS') {\n              if (result.executeImmediately) {\n                $scope.processDefinition.suspended = result.suspended;\n                $rootScope.$broadcast('$processDefinition.suspensionState.changed', $scope.processDefinition);\n              }\n\n              $scope.processData.set('filter', angular.extend({}, $scope.filter));\n            }\n          });\n        };\n\n      }],\n      priority: 50\n    });\n  }];\n});\n\n","/* global define: false */\ndefine('base/app/views/processDefinition/updateSuspensionStateDialog',['angular'], function(angular) {\n  'use strict';\n  return [\n          '$scope', '$http', '$filter', 'Uri', 'Notifications', '$modalInstance', 'processDefinition',\n  function($scope,   $http,   $filter,   Uri,   Notifications,   $modalInstance,   processDefinition) {\n\n    var BEFORE_UPDATE = 'BEFORE_UPDATE',\n        PERFORM_UPDATE = 'PERFORM_UDPATE',\n        UPDATE_SUCCESS = 'SUCCESS',\n        UPDATE_FAILED = 'FAIL';\n\n    var dateFilter = $filter('date'),\n        dateFormat = 'yyyy-MM-dd\\'T\\'HH:mm:ss';\n\n\n    $scope.processDefinition = processDefinition;\n\n    $scope.status = BEFORE_UPDATE;\n\n    $scope.data = {\n      includeInstances : true,\n      executeImmediately : true,\n      executionDate : dateFilter(Date.now(), dateFormat)\n    };\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.updateSuspensionState = function () {\n      $scope.status = PERFORM_UPDATE;\n\n      var data = {};\n\n      data.suspended = !processDefinition.suspended;\n      data.includeProcessInstances = $scope.data.includeInstances;\n      data.executionDate = !$scope.data.executeImmediately ? $scope.data.executionDate : null;\n\n      $http\n      .put(Uri.appUri('engine://engine/:engine/process-definition/' + processDefinition.id + '/suspended/'), data)\n      .success(function () {\n        $scope.status = UPDATE_SUCCESS;\n\n        if ($scope.data.executeImmediately) {\n          Notifications.addMessage({\n            status: 'Finished',\n            message: 'Updated the suspension state of the process definition.',\n            exclusive: true\n          });\n        } else {\n          Notifications.addMessage({\n            status: 'Finished',\n            message: 'The update of the suspension state of the process definition has been scheduled.',\n            exclusive: true\n          });\n        }\n\n      }).error(function (response) {\n        $scope.status = UPDATE_FAILED;\n\n        if ($scope.data.executeImmediately) {\n          Notifications.addError({\n            status: 'Finished',\n            message: 'Could not update the suspension state of the process definition: ' + response.message,\n            exclusive: true\n          });\n        } else {\n          Notifications.addMessage({\n            status: 'Finished',\n            message: 'The update of the suspension state of the process definition could not be scheduled: ' + response.message,\n            exclusive: true\n          });\n        }\n      });\n    };\n\n    $scope.isValid = function () {\n      var formScope = angular.element('[name=\"updateSuspensionStateForm\"]').scope();\n      return (formScope && formScope.updateSuspensionStateForm) ? formScope.updateSuspensionStateForm.$valid : false;\n    };\n\n    $scope.close = function (status) {\n      var response = {};\n\n      response.status = status;\n      response.suspended = !processDefinition.suspended;\n      response.executeImmediately = $scope.data.executeImmediately;\n      response.executionDate = $scope.data.executionDate;\n\n      $modalInstance.close(response);\n    };\n\n  }];\n});\n\n","\ndefine('text!base/app/views/processDefinition/activity-instance-statistics-overlay.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/activity-instance-statistics-overlay.html -->\\n<span class=\"activity-bottom-left-position\"\\n      ng-show=\"activityInstance\"\\n      ng-click=\"selectRunningInstances($event)\">\\n  <span class=\"badge\"\\n        tooltip=\"Running Activity Instances\"\\n        tooltip-placement=\"top\"\\n        tooltip-animation=\"false\"\\n        ng-show=\"activityInstance.instances\">\\n    {{ activityInstance.instances | abbreviateNumber }}\\n  </span>\\n\\n  <span class=\"badge badge-important\"\\n        tooltip=\"Open Incidents\"\\n        tooltip-placement=\"top\"\\n        tooltip-animation=\"false\"\\n        ng-show=\"activityInstance.incidents\">!</span>\\n</span>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processDefinition/activity-instance-statistics-overlay.html -->\\n';});\n\n","/* global define: false */\ndefine('base/app/views/processDefinition/activityInstanceStatisticsOverlay',['angular', 'text!./activity-instance-statistics-overlay.html'], function(angular, template) {\n  'use strict';\n\n  return [ 'ViewsProvider', function(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('cockpit.processDefinition.diagram.overlay', {\n      id: 'activity-instance-statistics-overlay',\n      template: template,\n      controller: [\n               '$scope',\n      function ($scope) {\n\n        var bpmnElement = $scope.bpmnElement,\n            processData = $scope.processData.newChild($scope);\n\n        processData.provide('activityInstance', ['activityInstanceStatistics', function (activityInstanceStatistics) {\n          for (var i = 0; i < activityInstanceStatistics.length; i++) {\n            var current = activityInstanceStatistics[i];\n            if (current.id === bpmnElement.id) {\n              return current;\n            }\n          }\n          return null;\n        }]);\n\n        $scope.activityInstance = processData.observe('activityInstance', function(activityInstance) {\n          if (activityInstance) {\n            bpmnElement.isSelectable = true;\n          }\n\n          $scope.activityInstance = activityInstance;\n        });\n\n        var currentFilter = processData.observe('filter', function(filter) {\n          currentFilter = filter;\n        });\n\n        $scope.selectRunningInstances = function(e) {\n          var newFilter = angular.copy(currentFilter),\n              ctrl = e.ctrlKey,\n              activityId = bpmnElement.id,\n              activityIds = angular.copy(newFilter.activityIds) || [],\n              idx = activityIds.indexOf(activityId),\n              selected = idx !== -1;\n\n          if (!activityId) {\n            activityIds = null;\n\n          } else {\n\n            if (ctrl) {\n              if (selected) {\n                activityIds.splice(idx, 1);\n\n              } else {\n                activityIds.push(activityId);\n              }\n\n            } else {\n              activityIds = [ activityId ];\n            }\n          }\n\n          newFilter.activityIds = activityIds;\n\n          processData.set('filter', newFilter);\n        };\n\n      }],\n      priority: 20\n    });\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/variable-instance-upload-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instance-upload-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Upload binary variable</h3>\\n</div>\\n\\n<!--[if lt IE 10]>\\n\\nThis feature is unsupported in your Browser.\\n\\n<![endif]-->\\n\\n<![if gt IE 9]>\\n\\n<div class=\"variable-instance-upload modal-body\">\\n  <div notifications-panel></div>\\n\\n  <div ng-show=\"status === \\'beforeUpload\\'\">\\n\\n    <p>Select a file containing the binary content for  the variable:</p>\\n\\n    <p>\\n      <input name=\"data\"\\n             type=\"file\"\\n             size=\"50\"\\n             maxlength=\"100000\"\\n             accept=\"*/*\"\\n             onchange=\"angular.element(this).scope().setFile(this)\" />\\n    </p>\\n\\n  </div>\\n\\n  <div ng-show=\"status === \\'performUpload\\'\">\\n    Upload progress: {{progress}}%\\n  </div>\\n\\n  <div ng-show=\"status === \\'uploadSuccess\\'\">\\n    <p>\\n      Variable <code>{{variableInstance.name}}</code> of execution <code>{{variableInstance.executionId}}</code>\\n      was successfully replaced with the content of the uploaded file.\\n    </p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'uploadFailed\\'\">\\n      Could not update variable <code>{{variableInstance.name}}</code> of execution <code>{{variableInstance.executionId}}</code>.\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close(status)\"\\n          ng-hide=\"status === \\'uploadSuccess\\' || status === \\'uploadFailed\\'\">\\n    Close\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close(status)\"\\n          ng-show=\"status === \\'uploadSuccess\\' || status === \\'uploadFailed\\'\">\\n    OK\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"upload()\"\\n          ng-disabled=\"status !== \\'beforeUpload\\'\"\\n          ng-hide=\"status === \\'uploadSuccess\\' || status === \\'uploadFailed\\'\">\\n    Upload\\n  </button>\\n</div>\\n\\n<![endif]>\\n\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instance-upload-dialog.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/variable-instance-inspect-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instance-inspect-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Inspect Object Variable</h3>\\n</div>\\n\\n<div class=\"variable-instance-inspect modal-body\">\\n  <div notifications-panel></div>\\n\\n  <form name=\"serializableVariable\"\\n        ng-show=\"status === \\'beforeChange\\' || status === \\'confirmChange\\'\">\\n\\n    <p>\\n      <strong>Value Info:</strong>\\n    </p>\\n\\n    <p>\\n     Object type name: <code>{{objectType}}</code>\\n    </p>\\n    <p>\\n     Serialization Data Format: <code>{{dataFormat}}</code>\\n    </p>\\n\\n    <p>\\n      <strong>Value:</strong>\\n    </p>\\n\\n    <ul class=\"nav nav-tabs\">\\n      <li ng-class=\"{ active: selectedTab === \\'serialized\\' }\">\\n        <a href\\n           ng-click=\"selectTab(\\'serialized\\')\">Serialized</a>\\n      </li>\\n      <li ng-class=\"{ active: selectedTab === \\'deserialized\\' }\">\\n        <a href\\n           ng-click=\"selectTab(\\'deserialized\\')\">Deserialized</a>\\n      </li>\\n    </ul>\\n    <div>\\n      <div ng-if=\"selectedTab === \\'serialized\\'\">\\n        <textarea name=\"currentValue\"\\n                  ng-model=\"currentValue\"\\n                  ng-keyup=\"typeIn(this, \\'serialized\\')\"\\n                  rows=\"10\"\\n                  class=\"form-control\">\\n        </textarea>\\n      </div>\\n\\n      <div ng-if=\"selectedTab === \\'deserialized\\'\">\\n        <div class=\"alert alert-danger\"\\n             ng-show=\"deserializationError\">\\n          <strong>Deserialization Error</strong>:\\n          {{deserializationError}}\\n        </div>\\n\\n        <div ng-show=\"!deserializationError\">\\n          <textarea name=\"currentValueDeserialized\"\\n                    ng-model=\"currentValueDeserialized\"\\n                    ng-keyup=\"typeIn(this, \\'deserialized\\')\"\\n                    rows=\"10\"\\n                    class=\"form-control\">\\n          </textarea>\\n        </div>\\n      </div>\\n    </div>\\n  </form>\\n\\n  <div class=\"alert alert-block\"\\n       ng-show=\"status === \\'confirmChange\\'\">\\n    <span class=\"glyphicon glyphicon-warning-sign\"></span>\\n    <strong>Warning:</strong>\\n    Are you sure you want to change the value of this Object? Changing the variable in an incompatible way may lead to severe runtime problems.\\n  </div>\\n\\n  <div ng-show=\"status === \\'changeSuccess\\'\">\\n    <p>\\n      Variable <code>{{variableInstance.name}}</code> of execution <code>{{variableInstance.executionId}}</code>\\n      was successfully updated.\\n    </p>\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"$dismiss()\"\\n          ng-hide=\"status === \\'changeSuccess\\'\">\\n    Close\\n  </button>\\n\\n  <![if gt IE 9]>\\n    <button class=\"btn btn-primary\"\\n            ng-click=\"$close()\"\\n            ng-show=\"status === \\'changeSuccess\\'\">\\n      OK\\n    </button>\\n\\n    <button class=\"btn btn-primary\"\\n            ng-click=\"change()\"\\n            ng-disabled=\"status !== \\'beforeChange\\' || !hasChanged()\"\\n            ng-hide=\"status != \\'beforeChange\\'\">\\n      Change\\n    </button>\\n\\n    <button class=\"btn btn-warning\"\\n            ng-click=\"change()\"\\n            ng-hide=\"status != \\'confirmChange\\'\">\\n      Confirm Change\\n    </button>\\n  <![endif]>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instance-inspect-dialog.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/variable-instances-tab.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instances-tab.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No process variables\">\\n  <!-- <div cam-widget-debug debugged=\"variables\"></div> -->\\n\\n  <div cam-widget-variables-table\\n       on-save=\"saveVariable\"\\n       on-edit=\"editVariable\"\\n       on-upload=\"uploadVariable\"\\n       on-delete=\"deleteVariable\"\\n       cam-variables=\"variables\"\\n       cam-editable=\"[\\'type\\', \\'value\\']\"\\n       cam-headers=\"{ name: \\'Name\\', value: \\'Value\\', type: \\'Type\\', scope: \\'Scope\\' }\"></div>\\n\\n\\n  <pagination ng-if=\"pages.total > pages.size\"\\n              class=\"pagination-sm\"\\n\\n              page=\"pages.current\"\\n              ng-model=\"pages.current\"\\n\\n              total-items=\"pages.total\"\\n              items-per-page=\"pages.size\"\\n\\n              max-size=\"7\"\\n              boundary-links=\"true\"></pagination>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/variable-instances-tab.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/variableInstancesTab',['text!./variable-instance-upload-dialog.html', 'text!./variable-instance-inspect-dialog.html', 'text!./variable-instances-tab.html'],\nfunction(uploadTemplate, inspectTemplate, instancesTemplate) {\n  'use strict';\n\n  return function(ngModule) {\n    ngModule.controller('VariableInstancesController', [\n              '$scope', '$sce', '$http', 'search', 'Uri', 'LocalExecutionVariableResource', 'Notifications', '$modal', '$q', 'camAPI',\n      function($scope,   $sce,   $http,   search,   Uri,   LocalExecutionVariableResource,   Notifications,   $modal,   $q,   camAPI) {\n\n        // input: processInstance, processData\n\n        var variableInstanceData = $scope.processData.newChild($scope),\n            processInstance = $scope.processInstance,\n            variableInstanceIdexceptionMessageMap,\n            variableCopies;\n\n        var executionService = camAPI.resource('execution'),\n            taskService = camAPI.resource('task');\n\n\n        var DEFAULT_PAGES = { size: 50, total: 0, current: 1 };\n\n        var pages = $scope.pages = angular.copy(DEFAULT_PAGES);\n\n        var filter = null;\n\n        $scope.$watch('pages.current', function(newValue, oldValue) {\n          if (newValue == oldValue) {\n            return;\n          }\n\n          search('page', !newValue || newValue == 1 ? null : newValue);\n        });\n\n        variableInstanceData.observe([ 'filter', 'instanceIdToInstanceMap' ], function(newFilter, instanceIdToInstanceMap) {\n          pages.current = newFilter.page || 1;\n\n          updateView(newFilter, instanceIdToInstanceMap);\n        });\n\n        $scope.uploadVariable = function(info) {\n          var promise = $q.defer();\n          $modal.open({\n            resolve: {\n              variableInstance: function() { return info.variable; }\n            },\n            controller: 'VariableInstanceUploadController',\n            template: uploadTemplate\n          })\n          .result.then(function() {\n            // updated the variable, need to get the new data\n            // reject the promise anyway\n            promise.reject();\n\n            // but then update the filter to force re-get of variables\n            variableInstanceData.set('filter', angular.copy($scope.filter));\n          }, function() {\n            // did not update the variable, reject the promise\n            promise.reject();\n          });\n\n          return promise.promise;\n        };\n\n        $scope.deleteVariable = function(info) {\n          var promise = $q.defer();\n\n          var callback = function(error) {\n            if(error) {\n              Notifications.addError({\n                status: 'Variable',\n                message: 'The variable \\'' + info.variable.name + '\\' could not be deleted successfully.',\n                exclusive: true,\n                duration: 5000\n              });\n              promise.reject();\n            } else {\n              Notifications.addMessage({\n                status: 'Variable',\n                message: 'The variable \\'' + info.variable.name + '\\' has been deleted successfully.',\n                duration: 5000\n              });\n              promise.resolve(info.variable);\n            }\n          };\n\n          if(info.original.taskId) {\n            taskService.deleteVariable({\n              id: info.original.taskId,\n              varId: info.variable.name\n            }, callback);\n          } else {\n            executionService.deleteVariable({\n              id: info.variable.executionId,\n              varId: info.variable.name\n            }, callback);\n          }\n\n          return promise.promise;\n        };\n\n        $scope.editVariable = function(info) {\n          var promise = $q.defer();\n\n          $modal.open({\n            template: inspectTemplate,\n\n            controller: 'VariableInstanceInspectController',\n\n            windowClass: 'cam-widget-variable-dialog',\n\n            resolve: {\n              variableInstance: function () { return info.variable; }\n            }\n          })\n          .result.then(function() {\n            // updated the variable, need to get the new data\n            // reject the promise anyway\n            promise.reject();\n\n            // but then update the filter to force re-get of variables\n            variableInstanceData.set('filter', angular.copy($scope.filter));\n          }, function() {\n            // did not update the variable, reject the promise\n            promise.reject();\n          });\n\n          return promise.promise;\n        };\n\n        $scope.saveVariable = function (info) {\n          var promise = $q.defer();\n          var variable = info.variable;\n          var modifiedVariable = {};\n\n          var newValue = variable.value;//$scope.getCopy(variable.id).value;\n          var newType = variable.type;//$scope.getCopy(variable.id).type;\n\n          var newVariable = { value: newValue, type: newType };\n          modifiedVariable[variable.name] = newVariable;\n\n          var callback = function(error, data) {\n            if(error) {\n              Notifications.addError({\n                status: 'Variable',\n                message: 'The variable \\'' + variable.name + '\\' could not be changed successfully.',\n                exclusive: true,\n                duration: 5000\n              });\n              variableInstanceIdexceptionMessageMap[variable.id] = error.data;\n              promise.reject();\n            } else {\n              Notifications.addMessage({\n                status: 'Variable',\n                message: 'The variable \\'' + variable.name + '\\' has been changed successfully.',\n                duration: 5000\n              });\n              angular.extend(variable, newVariable);\n              promise.resolve(info.variable);\n            }\n          };\n\n          if(info.original.taskId) {\n            taskService.modifyVariables({\n              id: info.original.taskId,\n              modifications: modifiedVariable\n            }, callback);\n          } else {\n            executionService.modifyVariables({\n              id: variable.executionId,\n              modifications: modifiedVariable\n            }, callback);\n          }\n\n          return promise.promise;\n        };\n\n        function updateView(newFilter, instanceIdToInstanceMap) {\n          filter = $scope.filter = angular.copy(newFilter);\n\n          delete filter.page;\n          delete filter.activityIds;\n          delete filter.scrollToBpmnElement;\n\n          var page = pages.current,\n              count = pages.size,\n              firstResult = (page - 1) * count;\n\n          var defaultParams = {\n            processInstanceIdIn: [ processInstance.id ]\n          };\n\n          var pagingParams = {\n            firstResult: firstResult,\n            maxResults: count,\n            deserializeValues: false\n          };\n\n          var params = angular.extend({}, filter, defaultParams);\n\n          // fix missmatch -> activityInstanceIds -> activityInstanceIdIn\n          params.activityInstanceIdIn = params.activityInstanceIds;\n          delete params.activityInstanceIds;\n\n          $scope.variables = null;\n          $scope.loadingState = 'LOADING';\n\n          // get the 'count' of variables\n          $http.post(Uri.appUri('engine://engine/:engine/variable-instance/count'), params).success(function(data) {\n            pages.total = data.count;\n          });\n\n          variableInstanceIdexceptionMessageMap = {};\n          variableCopies = {};\n\n          $http.post(Uri.appUri('engine://engine/:engine/variable-instance/'), params, { params: pagingParams }).success(function(data) {\n\n            $scope.variables = data.map(function (item) {\n              var instance = instanceIdToInstanceMap[item.activityInstanceId];\n              item.instance = instance;\n              variableCopies[item.id] = angular.copy(item);\n\n              return {\n                variable: {\n                  id:           item.id,\n                  name:         item.name,\n                  type:         item.type,\n                  value:        item.value,\n                  valueInfo:    item.valueInfo,\n                  executionId:  item.executionId\n                },\n                original: item,\n                additions: {\n                  scope: {\n                    html:  '<a cam-select-activity-instance=\"\\'' +\n                                      instance.id +\n                                      '\\'\" ng-href=\"#/process-instance/' +\n                                      processInstance.id +\n                                      '?detailsTab=variables-tab&activityInstanceIds=' +\n                                      instance.id +\n                                      '\" title=\"' +\n                                      instance.id +\n                                      '\">' +\n                                        instance.name  +\n                                      '</a>',\n                    scopeVariables: {\n                      processData: $scope.processData\n                    }\n                  }\n                }\n              };\n            });\n\n            $scope.loadingState = data.length ? 'LOADED' : 'EMPTY';\n          });\n        }\n\n        $scope.getCopy = function (variableId) {\n          var copy = variableCopies[variableId];\n          if (isNull(copy)) {\n            copy.type = 'String';\n          }\n          return copy;\n        };\n\n        var isNull = $scope.isNull = function (variable) {\n          return variable.type === 'null' || variable.type === 'Null';\n        };\n\n        $scope.getBinaryVariableDownloadLink = function (variable) {\n          return Uri.appUri('engine://engine/:engine/variable-instance/'+variable.id+'/data');\n        };\n\n        $scope.openUploadDialog = function (variableInstance) {\n          $modal.open({\n            resolve: {\n              variableInstance: function() { return variableInstance; }\n            },\n            controller: 'VariableInstanceUploadController',\n            template: uploadTemplate\n          });\n        };\n\n        $scope.openInspectDialog = function (variableInstance) {\n          $modal.open({\n            resolve: {\n              variableInstance: function() { return variableInstance; }\n            },\n            controller: 'VariableInstanceInspectController',\n            template: inspectTemplate\n          }).result.then(function() {\n            variableInstanceData.set('filter', angular.copy($scope.filter));\n          });\n        };\n      }]);\n\n      var Configuration = function PluginConfiguration(ViewsProvider) {\n\n        ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.tab', {\n          id: 'variables-tab',\n          label: 'Variables',\n          template: instancesTemplate,\n          controller: 'VariableInstancesController',\n          priority: 20\n        });\n      };\n\n      Configuration.$inject = ['ViewsProvider'];\n      ngModule.config(Configuration);\n  };\n});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/variableInstanceUploadDialog',[], function() {\n  'use strict';\n\n  return [\n          '$scope', '$location', 'Notifications', '$modalInstance', 'Uri', 'variableInstance',\n  function($scope,   $location,   Notifications,   $modalInstance,   Uri,   variableInstance) {\n\n    var BEFORE_UPLOAD = 'beforeUpload',\n        PERFORM_UPLOAD = 'performUpload',\n        UPLOAD_SUCCESS = 'uploadSuccess',\n        UPLOAD_FAILED = 'uploadFailed';\n\n    $scope.variableInstance = variableInstance;\n    $scope.status = BEFORE_UPLOAD;\n\n    var variableType = $scope.variableInstance.type;\n\n    $scope.upload = function () {\n\n      // progress listeners\n\n      function uploadProgress(evt) {\n        $scope.$apply(function(){\n          $scope.status = PERFORM_UPLOAD;\n          if (evt.lengthComputable) {\n            $scope.progress = Math.round(evt.loaded * 100 / evt.total);\n          }\n        });\n      }\n\n      function uploadComplete() {\n        $scope.$apply(function(){\n          $scope.status = UPLOAD_SUCCESS;\n          Notifications.addMessage({'status': 'Success', 'message': 'File upload successfull.'});\n        });\n      }\n\n      function uploadFailed() {\n        $scope.$apply(function(){\n          $scope.status = UPLOAD_FAILED;\n          Notifications.addError({'status': 'Failed', 'message': 'File upload failed.', 'exclusive': ['type']});\n        });\n      }\n\n      // perform HTML 5 file opload (not supported by IE 9)\n      var fd = new FormData();\n      fd.append('data', $scope.file);\n      fd.append('valueType', variableType);\n      var xhr = new XMLHttpRequest();\n      xhr.upload.addEventListener('progress', uploadProgress, false);\n      xhr.addEventListener('load', uploadComplete, false);\n      xhr.addEventListener('error', uploadFailed, false);\n      xhr.addEventListener('abort', uploadFailed, false);\n      xhr.open('POST', $scope.getVariableUploadUrl());\n      xhr.send(fd);\n\n    };\n\n    $scope.setFile = function(element) {\n      $scope.file = element.files[0];\n    };\n\n    $scope.getVariableUploadUrl = function () {\n      return Uri.appUri('engine://engine/:engine/execution/'+variableInstance.executionId+'/localVariables/'+variableInstance.name+'/data');\n    };\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.close = function (status) {\n      $modalInstance.close(status);\n    };\n  }];\n});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/variableInstanceInspectDialog',['angular'], function(angular) {\n  'use strict';\n\n  return [\n          '$scope', '$location', '$http', 'Notifications', '$modalInstance', 'Uri', 'variableInstance',\n  function($scope,   $location,   $http,   Notifications,   $modalInstance,   Uri,   variableInstance) {\n\n    var BEFORE_CHANGE = 'beforeChange',\n        CONFIRM_CHANGE = 'confirmChange',\n        CHANGE_SUCCESS = 'changeSuccess';\n\n    $scope.selectedTab = 'serialized';\n\n    $scope.variableInstance = variableInstance;\n    $scope.status = BEFORE_CHANGE;\n\n    $scope.initialValue = variableInstance.value;\n    $scope.objectType = variableInstance.valueInfo.objectTypeName;\n    $scope.dataFormat = variableInstance.valueInfo.serializationDataFormat;\n\n    $scope.initialValueDeserialized = null;\n    $scope.deserializationError = null;\n\n    $scope.currentValue = angular.copy($scope.initialValue);\n    $scope.currentValueDeserialized = null;\n\n    $scope.confirmed = false;\n\n    function uploadComplete(parsedValue) {\n      var self = $scope.xhr;\n      $scope.$apply(function(){\n        if(self.status == 204) {\n          $scope.status = CHANGE_SUCCESS;\n\n          Notifications.addMessage({\n            status: 'Success',\n            message: 'Successfully updated the variable.'\n          });\n\n        }\n        else {\n          $scope.status = BEFORE_CHANGE;\n\n          Notifications.addError({\n            status: 'Failed',\n            message: 'Could not update variable: '+self.responseText,\n            exclusive: ['type']\n          });\n        }\n        // cleanup\n        delete $scope.xhr;\n      });\n    }\n\n    $scope.typeIn = function(formScope, type) {\n      if(type === 'serialized') {\n        $scope.currentValue = formScope.currentValue;\n      }\n      else {\n        $scope.currentValueDeserialized = formScope.currentValueDeserialized;\n      }\n\n      if ($scope.hasChanged(type)) {\n        $scope.status = CONFIRM_CHANGE;\n      }\n      else {\n        $scope.status = BEFORE_CHANGE;\n      }\n    };\n\n    $scope.hasChanged = function(type) {\n      if(type === 'serialized') {\n        return $scope.initialValue != $scope.currentValue;\n      }\n      else {\n        return $scope.initialValueDeserialized != $scope.currentValueDeserialized;\n      }\n    };\n\n    $scope.change = function () {\n      if($scope.status == BEFORE_CHANGE) {\n        $scope.status = CONFIRM_CHANGE;\n      }\n      else {\n        var newValue;\n        var updateDeserialized = false;\n\n        if($scope.selectedTab === 'serialized') {\n          newValue = $scope.currentValue;\n        }\n        else {\n          newValue = $scope.currentValueDeserialized;\n          updateDeserialized = true;\n        }\n\n        if($scope.dataFormat === \"application/json\" || updateDeserialized) {\n          try {\n            // check whether the user provided valid JSON.\n            JSON.parse(newValue);\n          } catch(e) {\n            $scope.status = BEFORE_CHANGE;\n            Notifications.addError({\n              status: 'Variable',\n              message: 'Could not parse JSON input: '+e,\n              exclusive: true\n            });\n            return;\n          }\n        }\n\n        if(!updateDeserialized) {\n          // update serialized\n\n          var variableUpdate = {\n            type: variableInstance.type,\n            value: newValue,\n            valueInfo: variableInstance.valueInfo\n          };\n\n          $http({method: 'PUT', url: $scope.getObjectVariablePutUrl(), data: variableUpdate})\n            .success(function(data, status, headers, config) {\n              $scope.status = CHANGE_SUCCESS;\n\n              Notifications.addMessage({\n                status: 'Success',\n                message: 'Successfully updated the variable.'\n              });\n\n            })\n            .error(function(data, status, headers, config) {\n              $scope.status = BEFORE_CHANGE;\n\n              Notifications.addError({\n                status: 'Failed',\n                message: 'Could not update variable: '+data,\n                exclusive: ['type']\n              });\n            });\n        }\n        else {\n          // update deserialized\n          // create HTML 5 form upload\n          var fd = new FormData();\n          fd.append('data', new Blob([$scope.currentValueDeserialized], {type : 'application/json'}));\n          fd.append('type', variableInstance.valueInfo.objectTypeName);\n\n          var xhr = $scope.xhr = new XMLHttpRequest();\n          xhr.addEventListener('load', function() {\n            uploadComplete(newValue);\n          }, false);\n          xhr.open('POST', $scope.getSerializableVariableUploadUrl());\n          xhr.send(fd);\n        }\n\n\n      }\n\n    };\n\n    // load deserialized value:\n    $http({\n      method: 'GET',\n      url: Uri.appUri('engine://engine/:engine/variable-instance/'+variableInstance.id)\n    }).success(function(data, status) {\n      if(!data.errorMessage) {\n        $scope.initialValueDeserialized = JSON.stringify(data.value);\n        $scope.currentValueDeserialized = angular.copy($scope.initialValueDeserialized);\n      }\n      else {\n        $scope.deserializationError = data.errorMessage;\n      }\n    }).error(function(data, status) {\n      $scpe.deserializedValue = data;\n    });\n\n    $scope.selectTab = function(tab) {\n      $scope.selectedTab = tab;\n      // reset changed state\n      $scope.currentValue = angular.copy($scope.initialValue);\n      $scope.currentValueDeserialized = angular.copy($scope.initialValueDeserialized);\n      $scope.status = BEFORE_CHANGE;\n    };\n\n    $scope.getSerializableVariableUploadUrl = function () {\n      return Uri.appUri('engine://engine/:engine/execution/'+variableInstance.executionId+'/localVariables/'+variableInstance.name+'/data');\n    };\n\n    $scope.getObjectVariablePutUrl = function () {\n      return Uri.appUri('engine://engine/:engine/execution/'+variableInstance.executionId+'/localVariables/'+variableInstance.name);\n    };\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.dismiss();\n    });\n\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/incidents-tab.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/incidents-tab.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No incidents\">\\n  <table class=\"incidents-tab cam-table\">\\n    <thead>\\n      <tr>\\n        <th class=\"message\">Message</th>\\n        <th class=\"timestamp\">Timestamp</th>\\n        <th class=\"activity\">Activity</th>\\n        <th class=\"cause instance-id uuid\">Cause Process Instance Id</th>\\n        <th class=\"cause-root instance-id uuid\">Root Cause Process Instance Id</th>\\n        <th class=\"type\">Type</th>\\n        <th class=\"action\">Action</th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      <tr ng-repeat=\"incident in incidents\">\\n        <td class=\"message\">\\n          <span ng-show=\"incident.incidentType === \\'failedJob\\'\">\\n            <a href=\"{{ getJobStacktraceUrl(incident) }}\"\\n               target=\"_blank\"\\n               ng-show=\"incident.rootCauseIncidentMessage\"\\n               tooltip=\"Open stacktrace in new window\"\\n               tooltip-placement=\"top\">\\n              {{ incident.rootCauseIncidentMessage }}\\n            </a>\\n            <a href=\"{{ getJobStacktraceUrl(incident) }}\"\\n               target=\"_blank\"\\n               ng-hide=\"incident.rootCauseIncidentMessage\"\\n               tooltip=\"Open stacktrace in new window\"\\n               tooltip-placement=\"top\">\\n              <i>Message is null.</i>\\n            </a>\\n          </span>\\n\\n          <span ng-hide=\"incident.incidentType === \\'failedJob\\'\">\\n            <span ng-show=\"incident.rootCauseIncidentMessage\">{{ incident.rootCauseIncidentMessage }}</span>\\n            <span ng-hide=\"incident.rootCauseIncidentMessage\"><i>Message is null.</i></span>\\n          </span>\\n        </td>\\n\\n        <td class=\"timestamp\">\\n          {{ incident.incidentTimestamp }}\\n        </td>\\n\\n        <td class=\"activity\">\\n          <span ng-show=\"incident.linkable\">\\n            <a cam-select-activity=\"incident.activityId\"\\n               ng-href=\"#/process-instance/{{ processInstance.id }}?activityIds={{ incident.activityId }}&amp;detailsTab=incidents-tab\">\\n              {{ incident.activityName }}\\n            </a>\\n          </span>\\n          <span ng-hide=\"incident.linkable\">\\n            {{ incident.activityName }}\\n          </span>\\n        </td>\\n\\n        <td class=\"cause instance-id uuid\">\\n          <span ng-show=\"incident.causeIncidentProcessInstanceId !== incident.processInstanceId\" >\\n            <a href=\"#/process-instance/{{incident.causeIncidentProcessInstanceId}}?activityIds={{ incident.causeIncidentActivityId }}&amp;detailsTab=incidents-tab\">\\n              {{ incident.causeIncidentProcessInstanceId }}\\n            </a>\\n          </span>\\n        </td>\\n\\n        <td class=\"cause-root instance-id uuid\">\\n          <span ng-show=\"incident.rootCauseIncidentProcessInstanceId !== incident.processInstanceId\" >\\n            <a href=\"#/process-instance/{{incident.rootCauseIncidentProcessInstanceId}}?activityIds={{ incident.rootCauseIncidentActivityId }}&amp;detailsTab=incidents-tab\">\\n              {{ incident.rootCauseIncidentProcessInstanceId }}\\n            </a>\\n          </span>\\n        </td>\\n\\n        <td class=\"type\">\\n          {{ getIncidentType(incident) }}\\n        </td>\\n\\n        <td class=\"action\">\\n          <a class=\"btn btn-default action-button\"\\n             ng-click=\"openJobRetryDialog(incident)\"\\n             ng-show=\"incident.incidentType === \\'failedJob\\' && incident.configuration\"\\n             tooltip=\"Increment Number of Retries of Failed Job\"\\n             tooltip-placement=\"left\">\\n            <span class=\"glyphicon glyphicon-repeat\"></span>\\n          </a>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n\\n\\n  <pagination ng-if=\"pages.total > pages.size\"\\n              class=\"pagination-sm\"\\n\\n              page=\"pages.current\"\\n              ng-model=\"pages.current\"\\n\\n              total-items=\"pages.total\"\\n              items-per-page=\"pages.size\"\\n\\n              max-size=\"7\"\\n              boundary-links=\"true\"></pagination>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/incidents-tab.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/job-retry-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Increment Number of Retries</h3>\\n</div>\\n\\n<div class=\"job-retry modal-body\">\\n  <div notifications-panel></div>\\n\\n  <div ng-hide=\"status === \\'finished\\' || status === \\'failed\\'\">\\n    <p>The number of retries of the corresponding failed job of the selected incident will be incremented.</p>\\n    <p>Are you sure to increment the number of retries?</p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'finished\\'\">\\n    The number of retries of the corresponding failed job of the selected incident has been incremented successfully.\\n  </div>\\n\\n  <div ng-show=\"status === \\'failed\\'\">\\n    The number of retries of the corresponding failed job of the selected incident could not be incremented successfully.\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close(status)\"\\n          ng-disabled=\"status === \\'performing\\'\"\\n          ng-hide=\"status === \\'finished\\' || status === \\'failed\\'\">\\n    Close\\n  </button>\\n\\n  <button type=\"submit\"\\n          class=\"btn btn-primary\"\\n          ng-click=\"incrementRetry()\"\\n          ng-hide=\"status === \\'finished\\' || status === \\'failed\\'\"\\n          ng-disabled=\"status === \\'performing\\'\">\\n    Retry\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close(status)\"\\n          ng-show=\"status === \\'finished\\' || status === \\'failed\\'\">\\n    OK\\n  </button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-dialog.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/incidentsTab',['angular', 'text!./incidents-tab.html', 'text!./job-retry-dialog.html'], function(angular, incidentsTemplate, retryTemplate) {\n  'use strict';\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n    ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.tab', {\n      id: 'incidents-tab',\n      label: 'Incidents',\n      template: incidentsTemplate,\n      controller: [\n               '$scope', '$http', '$modal', 'search', 'Uri',\n      function ($scope,   $http,   $modal,   search,   Uri) {\n\n        // input: processInstance, processData\n\n        var incidentData = $scope.processData.newChild($scope);\n        var processInstance = $scope.processInstance;\n\n        var DEFAULT_PAGES = { size: 50, total: 0, current: 1 };\n\n        var pages = $scope.pages = angular.copy(DEFAULT_PAGES);\n\n        var filter = null;\n\n        $scope.$watch('pages.current', function(newValue, oldValue) {\n          if (newValue == oldValue) {\n            return;\n          }\n\n          search('page', !newValue || newValue == 1 ? null : newValue);\n        });\n\n        incidentData.observe([ 'filter', 'bpmnElements', 'activityIdToInstancesMap' ], function(newFilter, bpmnElements, activityIdToInstancesMap) {\n          pages.current = newFilter.page || 1;\n\n          updateView(newFilter, bpmnElements, activityIdToInstancesMap);\n        });\n\n        function updateView (newFilter, bpmnElements, activityIdToInstancesMap) {\n          filter = angular.copy(newFilter);\n\n          delete filter.page;\n          delete filter.activityInstanceIds;\n          delete filter.scrollToBpmnElement;\n\n          var page = pages.current,\n              count = pages.size,\n              firstResult = (page - 1) * count;\n\n          var defaultParams = {\n            processInstanceIdIn: [ processInstance.id ]\n          };\n\n          var pagingParams = {\n            firstResult: firstResult,\n            maxResults: count\n          };\n\n          var params = angular.extend({}, filter, defaultParams);\n\n          // fix missmatch -> activityIds -> activityIdIn\n          params.activityIdIn = params.activityIds;\n          delete params.activityIds;\n\n          $scope.incidents = null;\n\n          // get the 'count' of incidents\n          $http.post(Uri.appUri('plugin://base/:engine/incident/count'), params).success(function(data) {\n            pages.total = data.count;\n          });\n\n          // get the incidents\n          $scope.loadingState = 'LOADING';\n          $http.post(Uri.appUri('plugin://base/:engine/incident'), params, {params: pagingParams }).success(function(data) {\n            angular.forEach(data, function (incident) {\n              var activityId = incident.activityId;\n              var bpmnElement = bpmnElements[activityId];\n              incident.activityName = (bpmnElement && (bpmnElement.name || bpmnElement.id)) || activityId;\n              incident.linkable = bpmnElements[activityId] && activityIdToInstancesMap[activityId] && activityIdToInstancesMap[activityId].length > 0;\n            });\n\n            $scope.incidents = data;\n            $scope.loadingState = data.length ? 'LOADED' : 'EMPTY';\n          });\n        }\n\n        $scope.getIncidentType = function (incident) {\n          if (incident.incidentType === 'failedJob') {\n            return 'Failed Job';\n          }\n\n          return incident.incidentType;\n        };\n\n        $scope.getJobStacktraceUrl = function (incident) {\n          return Uri.appUri('engine://engine/:engine/job/' + incident.rootCauseIncidentConfiguration + '/stacktrace');\n        };\n\n        $scope.openJobRetryDialog = function(incident) {\n          var dialog = $modal.open({\n            resolve: {\n              incident: function() { return incident; }\n            },\n            controller: 'JobRetryController',\n            template: retryTemplate\n          });\n\n          dialog.result.then(function(result) {\n            if (result === 'finished') {\n              // refresh filter and all views\n              $scope.processData.set('filter', angular.extend({}, $scope.filter));\n            }\n          });\n\n        };\n      }],\n      priority: 15\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n});\n\n","\ndefine('text!base/app/views/processInstance/called-process-instance-table.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/called-process-instance-table.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No called process instances\">\\n  <table class=\"called-process-instance cam-table\">\\n    <thead>\\n      <tr>\\n        <th class=\"called-process-instance uuid\">Called Process Instance</th>\\n        <th class=\"process-definition\">Process Definition</th>\\n        <th class=\"activity\">Activity</th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      <tr ng-repeat=\"calledProcessInstance in calledProcessInstances\">\\n        <td class=\"called-process-instance uuid\">\\n          <a href=\"#/process-instance/{{ calledProcessInstance.id }}\">\\n            {{ calledProcessInstance.id }}\\n          </a>\\n        </td>\\n\\n        <td class=\"process-definition\">\\n          <a href=\"#/process-definition/{{ calledProcessInstance.processDefinitionId }}?parentProcessDefinitionId={{ processInstance.definitionId }}\">\\n            {{ calledProcessInstance.processDefinitionName }}\\n          </a>\\n        </td>\\n\\n        <td class=\"activity\">\\n          <a cam-select-activity-instance=\"calledProcessInstance.instance.id\"\\n             ng-href=\"#/process-instance/{{ processInstance.id }}?detailsTab=called-process-instances-tab&activityInstanceIds={{ calledProcessInstance.instance.id }}\">\\n            {{ calledProcessInstance.instance.name }}\\n          <a>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/called-process-instance-table.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/calledProcessInstanceTable',['angular', 'text!./called-process-instance-table.html'], function(angular, template) {\n  'use strict';\n\n  return function(ngModule) {\n    ngModule.controller('CalledProcessInstanceController', [\n              '$scope', 'PluginProcessInstanceResource',\n      function($scope,   PluginProcessInstanceResource) {\n\n        // input: processInstance, processData\n\n        var calledProcessInstanceData = $scope.processData.newChild($scope);\n        // var processInstance = $scope.processInstance;\n\n        var filter = null;\n\n        calledProcessInstanceData.observe([ 'filter', 'instanceIdToInstanceMap' ], function (newFilter, instanceIdToInstanceMap) {\n          updateView(newFilter, instanceIdToInstanceMap);\n        });\n\n        function updateView (newFilter, instanceIdToInstanceMap) {\n          filter = angular.copy(newFilter);\n\n          delete filter.page;\n          delete filter.activityIds;\n          delete filter.scrollToBpmnElement;\n\n          // fix missmatch -> activityInstanceIds -> activityInstanceIdIn\n          filter.activityInstanceIdIn = filter.activityInstanceIds;\n          delete filter.activityInstanceIds;\n\n          $scope.calledProcessInstances = null;\n\n          $scope.loadingState = 'LOADING';\n          PluginProcessInstanceResource\n          .processInstances({\n            id: $scope.processInstance.id\n          }, filter)\n          .$promise.then(function(response) {\n\n            // angular.forEach(response.data, function (calledInstance) {\n            angular.forEach(response, function (calledInstance) {\n              var instance = instanceIdToInstanceMap[calledInstance.callActivityInstanceId];\n              calledInstance.instance = instance;\n            });\n\n            $scope.loadingState = response.length ? 'LOADED' : 'EMPTY';\n            $scope.calledProcessInstances = response;\n          });\n        }\n      }]);\n\n      var Configuration = function PluginConfiguration(ViewsProvider) {\n        ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.tab', {\n          id: 'called-process-instances-tab',\n          label: 'Called Process Instances',\n          template: template,\n          controller: 'CalledProcessInstanceController',\n          priority: 10\n        });\n      };\n\n      Configuration.$inject = ['ViewsProvider'];\n\n      ngModule.config(Configuration);\n  };\n});\n\n","\ndefine('text!base/app/views/processInstance/identity-links-modal.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/identity-links-modal.html -->\\n<div class=\"modal-header\">\\n  <h3 class=\"modal-title\">{{ title }}</h3>\\n</div>\\n\\n<div class=\"identity-links modal-body\">\\n  <div notifications-panel></div>\\n\\n  <form name=\"editForm\"\\n        ng-submit=\"!invalid() && addItem()\">\\n    <fieldset ng-show=\"identityLinks.length\">\\n      <legend>{{ decorator.table.label }}</legend>\\n\\n      <table class=\"table cam-table\">\\n        <thead>\\n          <tr>\\n            <th class=\"id\">{{ decorator.table.id }}</th>\\n            <th class=\"action text-right\">Action</th>\\n          </tr>\\n        </thead>\\n\\n        <tbody>\\n          <tr ng-repeat=\"(delta, identityLink) in identityLinks\">\\n            <td class=\"id\">{{ identityLink[key] }}</td>\\n            <td class=\"action text-right\">\\n              <span class=\"btn btn-default action-button\"\\n                    ng-click=\"removeItem()\">\\n                <span class=\"glyphicon glyphicon-ban-circle\"></span>\\n              </span>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </fieldset>\\n\\n    <fieldset>\\n      <legend>{{ decorator.add.label }}</legend>\\n\\n      <div class=\"input-group\">\\n        <input class=\"form-control\"\\n               type=\"text\"\\n               ng-model=\"newItem\"\\n               name=\"newItem\"\\n               required />\\n        <span class=\"btn btn-primary input-group-addon\"\\n              ng-click=\"addItem()\"\\n              ng-disabled=\"invalid()\">\\n          <span class=\"glyphicon glyphicon-plus\"></span>\\n        </span>\\n      </div>\\n    </fieldset>\\n  </form>\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button ng-click=\"$dismiss()\"\\n          class=\"btn btn-default\">\\n    Close\\n  </button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/identity-links-modal.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/user-tasks-table.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/user-tasks-table.html -->\\n<div cam-widget-loader\\n     loading-state=\"{{ loadingState }}\"\\n     text-empty=\"No user tasks\">\\n  <table class=\"process-instance user-tasks cam-table\">\\n    <thead>\\n      <tr>\\n        <th class=\"activity uuid\">Activity</th>\\n        <th class=\"assignee\">Assignee</th>\\n        <th class=\"owner\">Owner</th>\\n        <th class=\"created\">Creation Date</th>\\n        <th class=\"due\">Due Date</th>\\n        <th class=\"follow-up\">Follow Up Date</th>\\n        <th class=\"priority\">Priority</th>\\n        <th class=\"delegation-state\">Delegation State</th>\\n        <th class=\"task-id uuid\">Task ID</th>\\n        <th class=\"action\">Action</th>\\n      </tr>\\n    </thead>\\n\\n    <tbody>\\n      <tr ng-repeat=\"userTask in userTasks\">\\n        <td class=\"activity\">\\n          <a cam-select-activity-instance=\"userTask.instance.id\"\\n             ng-href=\"{{ getHref(userTask) }}\">{{ userTask.instance.name || userTask.instance.id }}</a>\\n        </td>\\n\\n        <td class=\"assignee\">\\n          <cam-in-place-text-field\\n            submit=\"submitAssigneeChange\"\\n            context=\"userTask\"\\n            property=\"assignee\" />\\n        </td>\\n\\n        <td class=\"owner\">\\n          {{ userTask.owner }}\\n        </td>\\n\\n        <td class=\"created\">\\n          {{ userTask.created }}\\n        </td>\\n        <td class=\"due\">\\n          {{ userTask.due }}\\n        </td>\\n        <td class=\"follow-up\">\\n          {{ userTask.followUp }}\\n        </td>\\n        <td class=\"priority\">\\n          {{ userTask.priority }}\\n        </td>\\n        <td class=\"delegation-state\">\\n          {{ userTask.delegationState }}\\n        </td>\\n        <td class=\"task-id uuid\">\\n          {{ userTask.id }}\\n        </td>\\n\\n        <td class=\"action\">\\n          <a ng-click=\"changeGroupIdentityLinks()\"\\n             ng-model=\"userTask\"\\n             class=\"btn btn-default action-button change-group-identity-links\"\\n             tooltip-placement=\"left\"\\n             tooltip=\"Manage group(s) for \\'{{ userTask.name || userTask.id }}\\'\">\\n            <span class=\"glyphicon glyphicon-th\"></span>\\n          </a>\\n          <a ng-click=\"changeUserIdentityLinks()\"\\n             ng-model=\"userTask\"\\n             class=\"btn btn-default action-button change-user-identity-links\"\\n             tooltip-placement=\"left\"\\n             tooltip=\"Manage user(s) for \\'{{ userTask.name || userTask.id }}\\'\">\\n            <span class=\"glyphicon glyphicon-user\"></span>\\n          </a>\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n\\n\\n  <pagination ng-if=\"pages.total > pages.size\"\\n              class=\"pagination-sm\"\\n\\n              page=\"pages.current\"\\n              ng-model=\"pages.current\"\\n\\n              total-items=\"pages.total\"\\n              items-per-page=\"pages.size\"\\n\\n              max-size=\"7\"\\n              boundary-links=\"true\"></pagination>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/user-tasks-table.html -->\\n';});\n\n","/* global define: false, angular: false, require: false */\ndefine('base/app/views/processInstance/userTasksTable',['angular', 'text!./identity-links-modal.html', 'text!./user-tasks-table.html'], function(angular, identityLinksTemplate, userTasksTemplate) {\n  'use strict';\n\n  return function(ngModule) {\n\n    /**\n     * @name userTaskTable\n     * @memberof cam.cockpit.plugin.base.views\n     * @description ---\n     * @example\n        TODO\n     */\n\n    /**\n     * Map an array with a callback - similar to {@link http://underscorejs.org/#map|_.map()}\n     *\n     * @param {array} array   - the array on which iteration has to be performed\n     * @param {function} cb   - the function returning the new value for each array value\n     * @returns {array}       - a new array with the values produced\n     */\n    function map(array, cb) {\n      var newArray = [];\n      angular.forEach(array, function(val, key) {\n        newArray[key] = cb(val, key);\n      });\n      return newArray;\n    }\n\n    /**\n     * Removes \"empty\" values of an array - {@link http://underscorejs.org/#compact|_.compact()}\n     *\n     * @param {array} array   - the original array\n     * @returns {array}       - a new array with the values produced\n     */\n    function compact(array) {\n      var newArray = [];\n      angular.forEach(array, function(val) {\n        if (!!val) {\n          newArray.push(val);\n        }\n      });\n      return newArray;\n    }\n\n    /**\n     * Ensure a function\n     *\n     * @param {?function} func - the original function\n     * @returns {function}     - a function\n     */\n    function ensureCallback(func) {\n      return angular.isFunction(func) ? func : angular.noop;\n    }\n\n\n\n\n\n    ngModule.controller('UserTaskController', [\n            '$scope', 'search', 'camAPI', 'TaskResource', 'Notifications', '$modal',\n    function($scope,   search,   camAPI,   TaskResource,   Notifications,   $modal) {\n\n      // input: processInstance, processData\n\n      var userTaskData = $scope.processData.newChild($scope),\n          processInstance = $scope.processInstance,\n          taskIdIdToExceptionMessageMap,\n          taskCopies;\n\n      var DEFAULT_PAGES = { size: 50, total: 0, current: 1 };\n\n      var pages = $scope.pages = angular.copy(DEFAULT_PAGES);\n\n      var filter = null;\n\n      var Task = camAPI.resource('task');\n\n      $scope.$watch('pages.current', function(newValue, oldValue) {\n        if (newValue == oldValue) {\n          return;\n        }\n\n        search('page', !newValue || newValue == 1 ? null : newValue);\n      });\n\n      userTaskData.observe([ 'filter', 'executionIdToInstanceMap' ], function (newFilter, executionIdToInstanceMap) {\n        pages.current = newFilter.page || 1;\n\n        updateView(newFilter, executionIdToInstanceMap);\n      });\n\n      function updateView (newFilter, executionIdToInstanceMap) {\n        filter = angular.copy(newFilter);\n\n        delete filter.page;\n        delete filter.activityIds;\n        delete filter.scrollToBpmnElement;\n\n        var page = pages.current,\n            count = pages.size,\n            firstResult = (page - 1) * count;\n\n        var defaultParams = {\n          processInstanceId: processInstance.id,\n          processDefinitionId: processInstance.definitionId\n        };\n\n        var pagingParams = {\n          firstResult: firstResult,\n          maxResults: count\n        };\n\n        var params = angular.extend({}, filter, defaultParams);\n\n        // fix missmatch -> activityInstanceIds -> activityInstanceIdIn\n        params.activityInstanceIdIn = params.activityInstanceIds;\n        delete params.activityInstanceIds;\n\n        $scope.userTasks = null;\n        $scope.loadingState = 'LOADING';\n\n        taskIdIdToExceptionMessageMap = {};\n        taskCopies = {};\n\n        TaskResource.count(params).$promise.then(function (response) {\n          pages.total = response.count;\n        });\n\n        TaskResource.query(pagingParams, params).$promise.then(function (response) {\n          // for (var i = 0, task; !!(task = response.resource[i]); i++) {\n          for (var i = 0, task; !!(task = response[i]); i++) {\n            task.instance = executionIdToInstanceMap[task.executionId];\n            taskCopies[task.id] = angular.copy(task);\n          }\n\n          $scope.userTasks = response;\n          $scope.loadingState = response.length ? 'LOADED' : 'EMPTY';\n        });\n\n      }\n\n      $scope.getHref = function (userTask) {\n        return '#/process-instance/' + processInstance.id + '?detailsTab=user-tasks-tab&activityInstanceIds=' + userTask.instance.id;\n      };\n\n      $scope.submitAssigneeChange = function(editForm, cb) {\n        cb = ensureCallback(cb);\n\n        var userTask = editForm.context;\n        var copy = taskCopies[userTask.id];\n        var defaultParams = {id: userTask.id};\n        var params = {userId : editForm.value};\n\n        TaskResource.setAssignee(defaultParams, params).$promise.then(\n          // success\n          function (response) {\n            var assignee = copy.assignee = userTask.assignee = response.userId;\n\n            var message;\n            if (assignee) {\n              message = 'The assignee of the user task \\'' +\n                         userTask.instance.name +\n                         '\\' has been set to \\'' +\n                         copy.assignee + '\\' successfully.';\n            }\n            else {\n              message = 'The assignee of the user task \\'' +\n                         userTask.instance.name +\n                         '\\' has been reseted successfully.';\n            }\n\n            Notifications.addMessage({\n              status: 'Assignee',\n              message: message,\n              duration: 5000\n            });\n\n            cb();\n          },\n\n          // error\n          function (error) {\n            var message;\n            if (userTask.assignee) {\n              message = 'The assignee of the user task \\'' +\n                         userTask.instance.name +\n                         '\\' could not be set to \\'' + userTask.assignee +\n                         '\\'. ' + error.data.message;\n            }\n            else {\n              message = 'The assignee of the user task \\'' +\n                         userTask.instance.name +\n                         '\\' could not be reseted. ' + error.data.message;\n            }\n\n            var err = {\n              status: 'Assignee',\n              message: message,\n              exclusive: true\n            };\n\n            userTask.assignee = copy.assignee;\n\n            Notifications.addError(err);\n            taskIdIdToExceptionMessageMap[userTask.id] = error.data;\n            cb(err);\n          }\n        );\n      };\n\n      $scope.openDialog = function(userTask, decorator) {\n\n        // 1. load the identityLinks\n        Task.identityLinks(userTask.id, function (err, response) {\n\n          // 2. filter the response.data to exclude links\n          var identityLinks = compact(map(response, function(item) {\n            var ok = item[decorator.key] && item.type !== 'assignee' && item.type !== 'owner';\n            return ok ? item : null;\n          }));\n\n          // 3. open a dialog\n          $modal.open({\n            resolve: {\n              userTask: function() { return userTask; },\n              identityLinks: function() { return identityLinks; },\n              decorator: function() { return decorator }\n            },\n            controller: 'IdentityLinksController',\n            template: identityLinksTemplate,\n            windowClass:  'identity-link-modal'\n          });\n        });\n\n      };\n\n      $scope.changeGroupIdentityLinks = function() {\n        var userTask = this.userTask;\n\n        $scope.openDialog(userTask, {\n          title: 'Manage groups',\n          table: {\n            label: 'Current group(s)',\n            id: 'Group ID'\n          },\n          add: {\n            label: 'Add a group'\n          },\n          notifications: {\n            remove: 'Could not remove group',\n            add: 'Could not add group'\n          },\n          key: 'groupId'\n        });\n      };\n\n      $scope.changeUserIdentityLinks = function() {\n        var userTask = this.userTask;\n\n        $scope.openDialog(userTask, {\n          title: 'Manage users',\n          table: {\n            label: 'Current user(s)',\n            id: 'User ID'\n          },\n          add: {\n            label: 'Add a user'\n          },\n          notifications: {\n            remove: 'Could not remove user',\n            add: 'Could not add user'\n          },\n          key: 'userId'\n        });\n      };\n\n      $scope.getExceptionForUserTask = function (userTask) {\n        return taskIdIdToExceptionMessageMap[userTask.id];\n      };\n\n    }]);\n\n    ngModule.controller('IdentityLinksController', [\n            '$modalInstance', 'camAPI', '$scope', 'Notifications', 'userTask', 'identityLinks', 'decorator',\n    function($modalInstance,   camAPI,   $scope,   Notifications,   userTask,   identityLinks,   decorator) {\n\n      var Task = camAPI.resource('task');\n\n      $scope.identityLinks = identityLinks;\n      $scope.decorator = decorator;\n\n      $scope.title = decorator.title;\n      var key = $scope.key = decorator.key;\n\n      $scope.$on('$routeChangeStart', function () {\n        $modalInstance.close();\n      });\n\n      $scope.removeItem = function() {\n        var delta = this.delta;\n\n        Task.identityLinksDelete(userTask.id, this.identityLink, function (err) {\n\n          if (err) {\n            return Notifications.addError({\n              status: decorator.notifications.remove,\n              message: err.message,\n              exclusive: true\n            });\n          }\n\n          // deleting an entry is not enough, we need to \"rebuild\" the identiy links\n          identityLinks = $scope.identityLinks = compact(map(identityLinks, function(g, d) {\n            return delta !== d ? g : false;\n          }));\n\n        });\n      };\n\n      $scope.invalid = function() {\n        var editForm = this.editForm;\n\n        if (editForm.$invalid) {\n          return true;\n        }\n\n        var exists;\n        var newItem = editForm.newItem.$modelValue;\n        angular.forEach(identityLinks, function(identityLink) {\n          exists = (exists || (identityLink[key] === newItem));\n        });\n\n        return exists;\n      };\n\n      $scope.addItem = function() {\n        var editForm = this;\n\n        var newIdentityLink = {\n          type: 'candidate'\n        };\n\n        newIdentityLink[key] = editForm.newItem\n\n        Task.identityLinksAdd(userTask.id, newIdentityLink, function(err) {\n\n          if (err) {\n            return Notifications.addError({\n              status: decorator.notifications.add,\n              message: err.message,\n              exclusive: true\n            });\n          }\n\n          identityLinks.push(newIdentityLink);\n          editForm.newItem = '';\n\n        });\n      };\n\n    }]);\n\n    var Configuration = function(ViewsProvider) {\n      ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.tab', {\n        id: 'user-tasks-tab',\n        label: 'User Tasks',\n        template: userTasksTemplate,\n        controller: 'UserTaskController',\n        priority: 5\n      });\n    };\n\n    Configuration.$inject = ['ViewsProvider'];\n\n    ngModule.config(Configuration);\n\n  };\n});\n\n","\ndefine('text!base/app/views/processInstance/job-retry-bulk-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-bulk-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Increment Number of Retries</h3>\\n</div>\\n\\n<div class=\"job-retry-bulk modal-body\">\\n  <div notifications-panel></div>\\n\\n  <form name=\"selectFailedJobsForm\"\\n        ng-hide=\"status === \\'finished\\' || status === \\'performing\\'\">\\n    <fieldset>\\n      <p>Select one of the following failed jobs to increment their number of retries:</p>\\n      <div cam-widget-loader\\n           loading-state=\"{{ loadingState }}\"\\n           text-empty=\"There are no failed jobs available to increment their retries.\">\\n        <table class=\"cam-table\">\\n          <thead>\\n            <tr>\\n              <th class=\"row-select\">\\n                <input type=\"checkbox\"\\n                       title=\"Select all\"\\n                       ng-model=\"allJobsSelected\"\\n                       ng-change=\"selectAllJobs(allJobsSelected)\">\\n              </th>\\n              <th class=\"job-id uuid\">ID</th>\\n              <th class=\"scope\">Scope</th>\\n              <th class=\"exception\">Exception</th>\\n            </tr>\\n          </thead>\\n\\n          <tbody>\\n            <tr ng-repeat=\"job in failedJobs\">\\n              <td class=\"row-select\">\\n                <input type=\"checkbox\"\\n                       ng-model=\"job.selected\"\\n                       ng-change=\"selectFailedJob(job)\">\\n              </td>\\n\\n              <td class=\"job-id uuid\">{{ job.id }}</td>\\n\\n              <td class=\"scope\">{{ job.instance.name }}</td>\\n\\n              <td class=\"exception\">{{ job.exceptionMessage }}</td>\\n            </tr>\\n          </tbody>\\n        </table>\\n\\n\\n        <pagination ng-if=\"jobPages.total > jobPages.size\"\\n                    class=\"pagination-sm\"\\n\\n                    page=\"jobPages.current\"\\n                    ng-model=\"jobPages.current\"\\n\\n                    total-items=\"jobPages.total\"\\n                    items-per-page=\"jobPages.size\"\\n\\n                    max-size=\"7\"\\n                    boundary-links=\"true\"></pagination>\\n      </div>\\n    </fieldset>\\n  </form>\\n\\n  <div ng-show=\"status === \\'finished\\' || status === \\'performing\\'\">\\n\\n    <table class=\"cam-table\">\\n      <thead>\\n        <tr>\\n          <th class=\"job-id uuid\">ID</th>\\n          <th class=\"scope\">Scope</th>\\n          <th class=\"status\">Status</th>\\n        </tr>\\n      </thead>\\n\\n      <tbody>\\n        <tr ng-repeat=\"job in showJobsRetried\">\\n          <td class=\"job-id uuid\">{{ job.id }}</td>\\n\\n          <td class=\"scope\">{{ job.instance.name }}</td>\\n\\n          <td class=\"status\">\\n            <span ng-show=\"job.status && job.status === \\'performing\\'\">\\n              <span class=\"glyphicon glyphicon-loading\"></span>\\n            </span>\\n            <span ng-show=\"job.status && job.status === \\'successful\\'\">\\n              <span class=\"glyphicon glyphicon-ok\"></span>&nbsp;Successful\\n            </span>\\n            <span ng-show=\"job.status && job.status === \\'failed\\'\">\\n              <span class=\"glyphicon glyphicon-remove\"></span>&nbsp;Failed\\n            </span>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n\\n\\n    <pagination ng-if=\"summarizePages.total > summarizePages.size\"\\n                class=\"pagination-sm\"\\n\\n                page=\"summarizePages.current\"\\n                ng-model=\"summarizePages.current\"\\n\\n                total-items=\"summarizePages.total\"\\n                items-per-page=\"summarizePages.size\"\\n\\n                max-size=\"7\"\\n                boundary-links=\"true\"></pagination>\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close()\"\\n          ng-hide=\"status === \\'finished\\' || status === \\'performing\\'\">\\n    Close\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"retryFailedJobs(selectedFailedJobIds)\"\\n          ng-disabled=\"!failedJobs || !failedJobs.length || !selectedFailedJobIds.length\"\\n          ng-hide=\"status === \\'finished\\' || status === \\'performing\\'\">\\n    Retry\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close()\"\\n          ng-disabled=\"status === \\'performing\\'\"\\n          ng-show=\"status === \\'performing\\' || status === \\'finished\\'\">\\n    OK\\n  </button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-bulk-dialog.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/job-retry-bulk-action.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-bulk-action.html -->\\n<a class=\"btn btn-default btn-toolbar\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Increment Number of Retries of Failed Jobs\"\\n   tooltip-placement=\"left\">\\n  <span class=\"glyphicon glyphicon-repeat\"></span>\\n</a>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/job-retry-bulk-action.html -->\\n';});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/jobRetryBulkAction',['text!./job-retry-bulk-dialog.html', 'text!./job-retry-bulk-action.html'], function(dialogTemplate, actionTemplate) {\n  'use strict';\n\n  return function(ngModule) {\n    ngModule.controller('JobRetryActionController', [\n              '$scope', '$modal',\n      function($scope,   $modal) {\n        $scope.openDialog = function () {\n          $modal.open({\n            resolve: {\n              processData: function() { return $scope.processData; },\n              processInstance: function() { return $scope.processInstance; }\n            },\n            controller: 'JobRetriesController',\n            template: dialogTemplate\n          });\n        };\n      }]);\n\n      var Configuration = function PluginConfiguration(ViewsProvider) {\n        ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.action', {\n          id: 'job-retry-action',\n          label: 'Job Retry Action',\n          template: actionTemplate,\n          controller: 'JobRetryActionController',\n          priority: 15\n        });\n      };\n\n      Configuration.$inject = ['ViewsProvider'];\n\n      ngModule.config(Configuration);\n  };\n\n});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/jobRetryBulkDialog',['angular'], function(angular) {\n  'use strict';\n\n  return [\n           '$scope', '$q', 'Notifications', 'JobResource', '$modalInstance', 'processData', 'processInstance',\n  function ($scope,   $q,   Notifications,   JobResource,   $modalInstance,   processData,   processInstance) {\n\n    var jobRetriesData = processData.newChild($scope);\n\n    var jobPages = $scope.jobPages = { size: 5, total: 0 };\n    var summarizePages = $scope.summarizePages = { size: 5, total: 0 };\n\n    var jobIdToFailedJobMap = {};\n    var selectedFailedJobIds = $scope.selectedFailedJobIds = [];\n\n    var finishedWithFailures = false;\n\n    var retryFailed = false;\n    $scope.allJobsSelected = false;\n\n    var FINISHED = 'finished',\n        PERFORM = 'performing',\n        SUCCESS = 'successful',\n        FAILED = 'failed';\n\n    var executionIdToInstanceMap = jobRetriesData.observe('executionIdToInstanceMap', function (executionMap) {\n      executionIdToInstanceMap = executionMap;\n    });\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.$watch('jobPages.current', function(newValue, oldValue) {\n      if (!newValue) {\n        jobPages.current = 1;\n        return;\n      }\n\n      if (newValue === oldValue) {\n        return;\n      }\n\n      jobPages.current = newValue;\n      updateJobTable(newValue);\n    });\n\n    function updateJobTable(page) {\n      $scope.failedJobs = null;\n      $scope.allJobsSelected = false;\n      $scope.loadingState = 'LOADING';\n\n      var count = jobPages.size;\n      var firstResult = (page - 1) * count;\n\n      JobResource.query({\n        firstResult: firstResult,\n        maxResults: count\n      },{\n        processInstanceId: processInstance.id,\n        withException: true,\n        noRetriesLeft: true\n      }).$promise.then(function (response) {\n        // for (var i = 0, job; !!(job = response.data[i]); i++) {\n        for (var i = 0, job; !!(job = response[i]); i++) {\n          jobIdToFailedJobMap[job.id] = job;\n          var instance = executionIdToInstanceMap[job.executionId];\n          job.instance = instance;\n\n          var index = selectedFailedJobIds.indexOf(job.id);\n          job.selected = index !== -1;\n        }\n\n        $scope.failedJobs = response;\n        $scope.loadingState = response.length ? 'LOADED' : 'EMPTY';\n      });\n\n      JobResource.count({\n        processInstanceId: processInstance.id,\n        withException: true\n      }).$promise.then(function(data) {\n        jobPages.total = data.count;\n      });\n    }\n\n    $scope.$watch('summarizePages.current', function(newValue) {\n      if (!newValue) {\n        return;\n      }\n\n      updateSummarizeTable(newValue);\n\n    });\n\n    function updateSummarizeTable (page) {\n      var count = summarizePages.size;\n      var firstResult = (page - 1) * count;\n\n      var showJobsRetried = $scope.showJobsRetried = [];\n\n      for (var i = 0; i < count; i++) {\n        var jobId = selectedFailedJobIds[i + firstResult];\n        var job = jobIdToFailedJobMap[jobId];\n        if (job) {\n          showJobsRetried.push(job);\n        }\n      }\n    }\n\n    $scope.selectAllJobs = function (allJobsSelected) {\n      // var selected = allJobsSelected;\n      angular.forEach($scope.failedJobs, function (job) {\n        job.selected = allJobsSelected;\n        selectFailedJob(job);\n      });\n    };\n\n    var selectFailedJob = $scope.selectFailedJob = function (failedJob) {\n      var index = selectedFailedJobIds.indexOf(failedJob.id);\n\n      if (failedJob.selected === true) {\n        if (index === -1) {\n          selectedFailedJobIds.push(failedJob.id);\n        }\n        return;\n      }\n\n      if (failedJob.selected === false) {\n        selectedFailedJobIds.splice(index, 1);\n        if ($scope.allJobsSelected === true) {\n          $scope.allJobsSelected = false;\n        }\n        return;\n      }\n    };\n\n    $scope.retryFailedJobs = function (selectedFailedJobIds) {\n      $scope.status = PERFORM;\n\n      summarizePages.total = selectedFailedJobIds.length;\n      summarizePages.current = 1;\n\n      doRetry(selectedFailedJobIds).then(function () {\n        if (!finishedWithFailures) {\n          Notifications.addMessage({\n            status: 'Finished',\n            message: 'Incrementing the number of retries finished.',\n            exclusive: true\n          });\n        } else {\n          Notifications.addError({\n            status: 'Finished',\n            message: 'Incrementing the number of retries finished with failures.',\n            exclusive: true\n          });\n        }\n\n        $scope.status = FINISHED;\n       });\n    };\n\n    function doRetry (selectedFailedJobIds) {\n      var deferred = $q.defer();\n\n      var count = selectedFailedJobIds.length;\n\n      function retryJob(job) {\n        job.status = PERFORM;\n        JobResource.setRetries({\n          id: job.id\n        }, {\n          retries: 1\n        }, function () {\n          job.status = SUCCESS;\n\n          // we want to show a summarize, when all requests\n          // responded, that's why we uses a counter\n          count = count - 1;\n          if (count === 0) {\n            deferred.resolve();\n          }\n\n        }, function (error) {\n          finishedWithFailures = true;\n\n          job.status = FAILED;\n          job.retryError = error;\n          retryFailed = true;\n\n          // we want to show a summarize, when all requests\n          // responded, that's why we uses a counter\n          count = count - 1;\n          if (count === 0) {\n            deferred.resolve();\n          }\n         });\n      }\n\n      for (var i = 0, jobId; !!(jobId = selectedFailedJobIds[i]); i++) {\n        var job = jobIdToFailedJobMap[jobId];\n        retryJob(job);\n      }\n\n      return deferred.promise;\n    }\n\n\n    $scope.close = function (status) {\n      $modalInstance.close(status);\n    };\n  }];\n});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/jobRetryDialog',[], function() {\n  'use strict';\n\n  return [\n           '$scope', '$location', 'Notifications', 'JobResource', '$modalInstance', 'incident',\n  function ($scope,   $location,   Notifications,   JobResource,   $modalInstance,   incident) {\n\n    var FINISHED = 'finished',\n        PERFORM = 'performing',\n        FAILED = 'failed';\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.incrementRetry = function () {\n      $scope.status = PERFORM;\n\n      JobResource.setRetries({\n        id: incident.configuration\n      }, {\n        retries: 1\n      }, function () {\n        $scope.status = FINISHED;\n\n        Notifications.addMessage({\n          status: 'Finished',\n          message: 'Incrementing the number of retries finished successfully.',\n          exclusive: true\n        });\n      }, function (error) {\n        $scope.status = FAILED;\n        Notifications.addError({\n          status: 'Finished',\n          message: 'Incrementing the number of retries was not successful: ' + error.data.message,\n          exclusive: true\n        });\n      });\n    };\n\n    $scope.close = function (status) {\n      $modalInstance.close(status);\n    };\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/cancel-process-instance-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/cancel-process-instance-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Cancel Process Instance</h3>\\n</div>\\n\\n<div class=\"cancel-process-instance modal-body\">\\n  <div notifications-panel></div>\\n\\n  <div ng-hide=\"status === \\'cancellationSuccess\\' || status === \\'cancellationFailed\\' || status === \\'beforeCancellation\\' || status === \\'loadingFailed\\'\">\\n    <span class=\"glyphicon glyphicon-loading\"></span>\\n    loading process instance information...\\n  </div>\\n\\n  <p ng-show=\"status === \\'loadingFailed\\'\">\\n    It was not possible to get further process instance informations to be able to cancel this process instance. Refresh the current page by pressing F5 and try once again to cancel this process instance.\\n  </p>\\n\\n  <div ng-show=\"status === \\'beforeCancellation\\'\">\\n    <div ng-show=\"subProcessInstances.length > 0\">\\n      <p>\\n        If you cancel this process instance the following sub process instances will also be canceled:\\n      </p>\\n\\n      <table class=\"table cam-table\">\\n        <thead>\\n          <tr>\\n            <th class=\"instance-id uuid\">ID</th>\\n          </tr>\\n        </thead>\\n\\n        <tbody>\\n          <tr ng-repeat=\"subProcessInstance in subProcessInstances\">\\n            <td class=\"instance-id uuid\">\\n              <a target=\"_blank\"\\n                 ng-href=\"#/process-instance/{{ subProcessInstance.id }}\">\\n                {{ subProcessInstance.id }}\\n              </a>\\n            </td>\\n          </tr>\\n\\n          <tr>\\n            <td ng-hide=\"subProcessInstances.length === subProcessInstancesCount\">\\n              and {{ subProcessInstancesCount - subProcessInstances.length }} other process instances.\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n\\n    <p>Do you really want to cancel this process instance?</p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'cancellationSuccess\\'\">\\n    <p>The process instance was canceled successfully.</p>\\n    <p>After closing this dialog you will be redirected to the corresponding process definition overview.</p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'cancellationFailed\\'\">\\n    <p>The process instance could not be canceled successfully.</p>\\n    <p>Maybe the process instance has already been cancelled or finished. Try to press F5 to refresh the page.</p>\\n  </div>\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close(status)\"\\n          ng-disabled=\"status === \\'performCancellation\\'\"\\n          ng-hide=\"status === \\'cancellationSuccess\\' || status === \\'cancellationFailed\\' || status === \\'loadingFailed\\'\">\\n    Close\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close(status)\"\\n          ng-show=\"status === \\'cancellationSuccess\\' || status === \\'cancellationFailed\\' || status === \\'loadingFailed\\'\">\\n    OK\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"cancelProcessInstance()\"\\n          ng-disabled=\"status !== \\'beforeCancellation\\'\"\\n          ng-hide=\"status === \\'cancellationSuccess\\' || status === \\'cancellationFailed\\' || status === \\'loadingFailed\\'\">\\n    Cancel Process Instance\\n  </button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/cancel-process-instance-dialog.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/cancel-process-instance-action.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/cancel-process-instance-action.html -->\\n<a class=\"btn btn-default btn-toolbar\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Cancel running process instance\"\\n   tooltip-placement=\"left\">\\n  <span class=\"glyphicon glyphicon-remove-circle\"></span>\\n</a>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/cancel-process-instance-action.html -->\\n';});\n\n","/* global ngDefine: false */\ndefine('base/app/views/processInstance/cancelProcessInstanceAction',['text!./cancel-process-instance-dialog.html', 'text!./cancel-process-instance-action.html'], function(dialogTemplate, actionTemplate) {\n  'use strict';\n\n  return function(ngModule) {\n    ngModule.controller('CancelProcessInstanceActionController', [\n            '$scope', '$http', 'search', 'Uri', '$modal',\n    function($scope,   $http,   search,   Uri,   $modal) {\n\n      $scope.openDialog = function () {\n        $modal.open({\n          resolve: {\n            processData: function() { return $scope.processData; },\n            processInstance: function() { return $scope.processInstance; }\n          },\n          controller: 'CancelProcessInstanceController',\n          template: dialogTemplate\n        });\n      };\n    }]);\n\n    var Configuration = function PluginConfiguration(ViewsProvider) {\n      ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.action', {\n        id: 'cancel-process-instance-action',\n        label: 'Cancel Process Instance Action',\n        template: actionTemplate,\n        controller: 'CancelProcessInstanceActionController',\n        priority: 20\n      });\n    };\n\n    Configuration.$inject = ['ViewsProvider'];\n\n    ngModule.config(Configuration);\n  };\n});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/cancelProcessInstanceDialog',[], function() {\n  'use strict';\n  return [\n          '$scope', '$location', 'Notifications', 'ProcessInstanceResource', '$modalInstance', 'processInstance', 'processData', 'Views',\n  function($scope,   $location,   Notifications,   ProcessInstanceResource,   $modalInstance,   processInstance,   processData,   Views) {\n\n    var BEFORE_CANCEL = 'beforeCancellation',\n        PERFORM_CANCEL = 'performCancellation',\n        CANCEL_SUCCESS = 'cancellationSuccess',\n        CANCEL_FAILED = 'cancellationFailed',\n        LOADING_FAILED = 'loadingFailed';\n\n    $scope.processInstance = processInstance;\n\n    var cancelProcessInstanceData = processData.newChild($scope);\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    cancelProcessInstanceData.provide('subProcessInstances', function () {\n      return ProcessInstanceResource.query({\n        firstResult: 0,\n        maxResults: 5\n      }, {\n        superProcessInstance:\n        processInstance.id\n      }).$promise;\n    });\n\n    cancelProcessInstanceData.provide('subProcessInstancesCount', function () {\n      return ProcessInstanceResource.count({\n        superProcessInstance: processInstance.id\n      }).$promise;\n    });\n\n    cancelProcessInstanceData.observe([ 'subProcessInstancesCount', 'subProcessInstances' ], function (subProcessInstancesCount, subProcessInstances) {\n      $scope.subProcessInstancesCount = subProcessInstancesCount.count;\n      $scope.subProcessInstances = subProcessInstances;\n\n      $scope.status = BEFORE_CANCEL;\n    });\n\n    $scope.cancelProcessInstance = function () {\n      $scope.status = PERFORM_CANCEL;\n\n      $scope.processInstance.$delete(function () {\n        // success\n        $scope.status = CANCEL_SUCCESS;\n        Notifications.addMessage({'status': 'Canceled', 'message': 'The cancellation of the process instance was successful.'});\n\n      }, function (err) {\n        // failure\n        $scope.status = CANCEL_FAILED;\n        Notifications.addError({'status': 'Failed', 'message': 'The cancellation of the process instance failed. ' + err.data.message, 'exclusive': ['type']});\n      });\n    };\n\n    $scope.close = function (status) {\n      $modalInstance.close(status);\n\n      // if the cancellation of the process instance was successful,\n      if (status === CANCEL_SUCCESS) {\n        var historyProvider = Views.getProvider({\n          id: 'history',\n          component: 'cockpit.processInstance.view'\n        });\n\n        var path;\n        var search;\n\n        if (historyProvider) {\n          // redirect to the corresponding historic process instance view\n          var currentPath = $location.path();\n          // keep search params\n          search = $location.search();\n          path = '/process-instance/' + processInstance.id + '/history';\n        }\n        else {\n          // or redirect to the corresponding process definition overview.\n          path = '/process-definition/' + processInstance.definitionId;\n        }\n\n        $location.path(path);\n        $location.search(search || {});\n        $location.replace();\n      }\n    };\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/add-variable-action.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/add-variable-action.html -->\\n<a class=\"btn btn-default btn-toolbar\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Add a new variable to Process Instance\"\\n   tooltip-placement=\"left\">\\n  <span class=\"glyphicon glyphicon-plus\"></span>\\n</a>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/add-variable-action.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/add-variable-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/add-variable-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>Add Variable to Process Instance</h3>\\n</div>\\n\\n<div class=\"modal-body add-variable-dialog\">\\n  <div notifications-panel></div>\\n\\n  <form class=\"form-horizontal\"\\n        name=\"addVariableForm\"\\n        novalidate\\n        ng-submit=\"save()\"\\n        ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\"\\n        request-aware>\\n    <fieldset>\\n\\n      <div class=\"form-group variable-name\">\\n        <label class=\"control-label col-xs-4\"\\n               for=\"variableName\">Variable Name*</label>\\n        <div class=\"col-xs-8\">\\n          <input id=\"variableNameId\"\\n                 name=\"variableName\"\\n                 class=\"form-control\"\\n                 type=\"text\"\\n                 ng-model=\"newVariable.name\"\\n                 autofocus\\n                 required />\\n        </div>\\n      </div>\\n\\n      <div class=\"form-group variable-type\">\\n        <label class=\"control-label col-xs-4\"\\n               for=\"variableType\">Variable Type*</label>\\n        <div class=\"col-xs-8\">\\n          <select id=\"variableTypeId\"\\n                  name=\"variableType\"\\n                  class=\"form-control\"\\n                  ng-options=\"variableType for variableType in variableTypes\"\\n                  ng-model=\"newVariable.type\"\\n                  ng-change=\"changeVariableType(variableType)\">\\n          </select>\\n        </div>\\n      </div>\\n\\n      <div class=\"form-group variable-value\">\\n        <label class=\"control-label col-xs-4\"\\n               for=\"variableValue\">Variable Value*</label>\\n        <div class=\"col-xs-8\">\\n          <div variable=\"newVariable\"></div>\\n\\n          <p class=\"invalid\"\\n             ng-show=\"this.addVariableForm.editDateValue.$error.date\">\\n            Supported pattern \\'yyyy-MM-ddTHH:mm:ss\\'.\\n          </p>\\n\\n          <p class=\"invalid\"\\n             ng-show=\"this.addVariableForm.editIntegerValue.$error.numeric || this.addVariableForm.editFloatValue.$error.numeric\">\\n            Only a {{ newVariable.type }} value is allowed.\\n          </p>\\n        </div>\\n      </div>\\n\\n    </fieldset>\\n  </form>\\n\\n  <div ng-show=\"status === \\'SUCCESS\\'\">\\n    The variable \"{{ newVariable.name }}\" has been added to the process instance successfully.\\n  </div>\\n\\n  <div ng-show=\"status === \\'FAIL\\'\">\\n    The variable \"{{ newVariable.name }}\" could not be added to the process instance.\\n  </div>\\n\\n</div>\\n\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-link\"\\n          ng-click=\"close()\"\\n          ng-disabled=\"status === \\'PERFORM_SAVE\\'\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">Close</button>\\n\\n  <button type=\"submit\"\\n          class=\"btn btn-primary\"\\n          ng-click=\"save()\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\"\\n          ng-disabled=\"!isValid()\">Add</button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close()\"\\n          ng-show=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">OK</button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/add-variable-dialog.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/addVariableAction',['angular', 'text!./add-variable-action.html', 'text!./add-variable-dialog.html'], function(angular, actionTemplate, dialogTemplate) {\n  'use strict';\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n    ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.action', {\n      id: 'add-variable-action',\n      label: 'Add Variable Action',\n      template: actionTemplate,\n      controller: [\n              '$scope', '$modal',\n      function($scope,   $modal) {\n        $scope.openDialog = function () {\n          var dialog = $modal.open({\n            scope: $scope,\n            resolve: {\n              processData: function() { return $scope.processData; },\n              processInstance: function() { return $scope.processInstance; }\n            },\n            controller: 'AddVariableController',\n            template: dialogTemplate\n          });\n\n          dialog.result.then(function(result) {\n\n            // dialog closed. YEA!\n            if (result === 'SUCCESS') {\n              // refresh filter and all views\n              $scope.processData.set('filter', angular.extend({}, $scope.filter));\n            }\n          });\n        };\n      }],\n      priority: 10\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/addVariableDialog',['angular'], function(angular) {\n  'use strict';\n  return [\n          '$scope', '$http', 'Uri', 'Notifications', '$modalInstance', 'processInstance',\n  function($scope,   $http,   Uri,   Notifications,   $modalInstance,   processInstance) {\n\n    $scope.variableTypes = [\n      'String',\n      'Boolean',\n      'Short',\n      'Integer',\n      'Long',\n      'Double',\n      'Date',\n      'Null',\n      'Object'\n    ];\n\n    var newVariable = $scope.newVariable = {\n      name: null,\n      type: 'String',\n      value: null\n    };\n\n    var PERFORM_SAVE = 'PERFORM_SAVE',\n        SUCCESS = 'SUCCESS',\n        FAIL = 'FAIL';\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.close = function () {\n      $modalInstance.close($scope.status);\n    };\n\n    var isValid = $scope.isValid = function() {\n      // that's a pity... I do not get why,\n      // but getting the form scope is.. kind of random\n      // m2c: it has to do with the `click event`\n      // Hate the game, not the player\n      var formScope = angular.element('[name=\"addVariableForm\"]').scope();\n      return (formScope && formScope.addVariableForm) ? formScope.addVariableForm.$valid : false;\n    };\n\n    $scope.save = function () {\n      if (!isValid()) {\n        return;\n      }\n\n      $scope.status = PERFORM_SAVE;\n\n      var data = angular.extend({}, newVariable),\n          name = data.name;\n\n      delete data.name;\n\n      $http\n      .put(Uri.appUri('engine://engine/:engine/process-instance/' + processInstance.id + '/variables/' + name), data)\n      .success(function () {\n        $scope.status = SUCCESS;\n\n        Notifications.addMessage({\n          status: 'Finished',\n          message: 'Added the variable',\n          exclusive: true\n        });\n      }).error(function (data) {\n        $scope.status = FAIL;\n\n        Notifications.addError({\n          status: 'Finished',\n          message: 'Could not add the new variable: ' + data.message,\n          exclusive: true\n        });\n      });\n    };\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/update-suspension-state-action.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/update-suspension-state-action.html -->\\n<a class=\"btn btn-default btn-toolbar btn-suspend-action\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Suspend Process Instance\"\\n   tooltip-placement=\"left\"\\n   ng-show=\"!processInstance.suspended\">\\n  <span class=\"glyphicon glyphicon-pause\"></span>\\n</a>\\n<a class=\"btn btn-default btn-toolbar\"\\n   href\\n   ng-click=\"openDialog()\"\\n   tooltip=\"Activate Process Instance\"\\n   tooltip-placement=\"left\"\\n   ng-hide=\"!processInstance.suspended\">\\n  <span class=\"glyphicon glyphicon-play\"></span>\\n</a>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/update-suspension-state-action.html -->\\n';});\n\n","\ndefine('text!base/app/views/processInstance/update-suspension-state-dialog.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/update-suspension-state-dialog.html -->\\n<div class=\"modal-header\">\\n  <h3>{{ (processInstance.suspended ? \\'Activate\\' : \\'Suspend\\') }} Process Instance</h3>\\n</div>\\n\\n<div class=\"process-instance update-suspension-state modal-body\">\\n  <div notifications-panel></div>\\n\\n  <div ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">\\n\\n    <div ng-show=\"processInstance.suspended\">\\n      <!-- activation -->\\n      <p>\\n        Activating a process instance means that the execution is running, so the <i>token state</i> will change.\\n      </p>\\n\\n      <p>\\n        Tasks belonging to this process instance will also be activated.\\n      </p>\\n\\n      <p>\\n        If a process instance is in the state active, the engine will also execute jobs associated with this process instance.\\n      </p>\\n\\n      <p>\\n        If this process instance have a process instance hierarchy, activating this process instance from the hierarchy will not activate other process instances from that hierarchy.\\n      </p>\\n\\n      <p>Do you really want to activate this process instance?</p>\\n    </div>\\n\\n    <div ng-hide=\"processInstance.suspended\">\\n      <!-- suspension -->\\n      <p>\\n        Suspending a process instance means that the execution is stopped, so the <i>token state</i> will not change. However, actions that do not change token state, like setting or removing variables, etc. will still succeed.\\n      </p>\\n\\n      <p>\\n        Tasks belonging to this process instance will also be suspended. This means that any actions influencing the tasks\\' lifecycles will fail, such as\\n        <ul>\\n          <li>claiming</li>\\n          <li>completing</li>\\n          <li>delegation</li>\\n          <li>changes in task assignees, owners, etc.</li>\\n        </ul>\\n        Actions that only change task properties will still succeed, such as changing variables.\\n      </p>\\n\\n      <p>\\n        If a process instance is in the state suspended, the engine will also not execute jobs associated with this process instance.\\n      </p>\\n\\n      <p>\\n        If this process instance have a process instance hierarchy, suspending this process instance from the hierarchy will not suspend other process instances from that hierarchy.\\n      </p>\\n\\n      <p>Do you really want to suspend this process instance?</p>\\n    </div>\\n\\n  </div>\\n\\n  <div ng-show=\"status === \\'SUCCESS\\'\">\\n    <p ng-show=\"processInstance.suspended\">\\n      The suspension state of the process instance has been updated to \"active\" successfully.\\n    </p>\\n    <p ng-hide=\"processInstance.suspended\">\\n      The suspension state of the process instance has been updated to \"suspended\" successfully.\\n    </p>\\n  </div>\\n\\n  <div ng-show=\"status === \\'FAIL\\'\">\\n    <p ng-show=\"processInstance.suspended\">\\n      The suspension state of the process instance could not be updated to \"active\" successfully.\\n    </p>\\n    <p ng-hide=\"processInstance.suspended\">\\n      The suspension state of the process instance could not be updated to \"suspended\" successfully.\\n    </p>\\n  </div>\\n\\n</div>\\n<div class=\"modal-footer\">\\n  <button class=\"btn btn-default\"\\n          ng-click=\"close(status)\"\\n          ng-disabled=\"status === \\'PERFORM_UDPATE\\'\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">Close</button>\\n\\n  <button type=\"submit\"\\n          class=\"btn btn-primary\"\\n          ng-click=\"updateSuspensionState()\"\\n          ng-hide=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\"\\n          ng-disabled=\"status === \\'PERFORM_UDPATE\\'\">\\n    {{ (processInstance.suspended ? \\'Activate\\' : \\'Suspend\\') }}\\n  </button>\\n\\n  <button class=\"btn btn-primary\"\\n          ng-click=\"close(status)\"\\n          ng-show=\"status === \\'SUCCESS\\' || status === \\'FAIL\\'\">OK</button>\\n</div>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/update-suspension-state-dialog.html -->\\n';});\n\n","/* global define: false, angular: false */\ndefine('base/app/views/processInstance/updateSuspensionStateAction',['angular', 'text!./update-suspension-state-action.html', 'text!./update-suspension-state-dialog.html'], function(angular, actionTemplate, dialogTemplate) {\n  'use strict';\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n    ViewsProvider.registerDefaultView('cockpit.processInstance.runtime.action', {\n      id: 'update-suspension-state-action',\n      label: 'Update Suspension State',\n      template:actionTemplate,\n      controller: [\n          '$scope', '$rootScope', '$modal',\n      function($scope,   $rootScope,   $modal) {\n\n        $scope.openDialog = function () {\n          var dialog = $modal.open({\n            resolve: {\n              processData: function() { return $scope.processData; },\n              processInstance: function() { return $scope.processInstance; }\n            },\n            controller: 'UpdateProcessInstanceSuspensionStateController',\n            template: dialogTemplate\n          });\n\n          dialog.result.then(function(result) {\n\n            // dialog closed. YEA!\n            if (result.status === 'SUCCESS') {\n              $scope.processInstance.suspended = result.suspended;\n              $rootScope.$broadcast('$processInstance.suspensionState.changed', $scope.processInstance);\n\n              $scope.processData.set('filter', angular.extend({}, $scope.filter));\n            }\n\n          });\n        };\n\n      }],\n      priority: 5\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n\n});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/updateSuspensionStateDialog',[], function() {\n  'use strict';\n\n  return [\n          '$scope', '$http', '$filter', 'Uri', 'Notifications', '$modalInstance', 'processInstance',\n  function($scope,   $http,   $filter,   Uri,   Notifications,   $modalInstance,   processInstance) {\n\n    var BEFORE_UPDATE = 'BEFORE_UPDATE',\n        PERFORM_UPDATE = 'PERFORM_UDPATE',\n        UPDATE_SUCCESS = 'SUCCESS',\n        UPDATE_FAILED = 'FAIL';\n\n    $scope.processInstance = processInstance;\n\n    $scope.status = BEFORE_UPDATE;\n\n    $scope.$on('$routeChangeStart', function () {\n      $modalInstance.close($scope.status);\n    });\n\n    $scope.updateSuspensionState = function () {\n      $scope.status = PERFORM_UPDATE;\n\n      var data = {};\n\n      data.suspended = !processInstance.suspended;\n\n      $http.put(Uri.appUri('engine://engine/:engine/process-instance/' + processInstance.id + '/suspended/'), data).success(function () {\n        $scope.status = UPDATE_SUCCESS;\n\n        Notifications.addMessage({\n          status: 'Finished',\n          message: 'Updated the suspension state of the process instance.',\n          exclusive: true\n        });\n\n      }).error(function (data) {\n        $scope.status = UPDATE_FAILED;\n\n        Notifications.addError({\n          status: 'Finished',\n          message: 'Could not update the suspension state of the process instance: ' + data.message,\n          exclusive: true\n        });\n      });\n    };\n\n    $scope.close = function (status) {\n      var response = {};\n\n      response.status = status;\n      response.suspended = !processInstance.suspended;\n\n      $modalInstance.close(response);\n    };\n\n  }];\n});\n\n","\ndefine('text!base/app/views/processInstance/activity-instance-statistics-overlay.html',[],function () { return '<!-- # CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/activity-instance-statistics-overlay.html -->\\n<span class=\"activity-bottom-left-position\"\\n      ng-show=\"activityInstanceStatistics\"\\n      ng-click=\"selectRunningInstances($event)\">\\n  <span class=\"badge\"\\n        tooltip=\"Running Activity Instances\"\\n        tooltip-placement=\"top\"\\n        tooltip-animation=\"false\"\\n        ng-show=\"activityInstanceStatistics.instances && activityInstanceStatistics.instances.length\">\\n    {{ activityInstanceStatistics.instances.length | abbreviateNumber }}\\n  </span>\\n\\n  <span class=\"badge badge-important\"\\n        tooltip=\"Open Incidents\"\\n        tooltip-placement=\"top\"\\n        tooltip-animation=\"false\"\\n        ng-show=\"activityInstanceStatistics.incidents && activityInstanceStatistics.incidents.length\">!</span>\\n</span>\\n<!-- / CE - camunda-bpm-webapp/webapp/src/main/resources-plugin/base/app/views/processInstance/activity-instance-statistics-overlay.html -->\\n';});\n\n","/* global define: false */\ndefine('base/app/views/processInstance/activityInstanceStatisticsOverlay',['angular', 'text!./activity-instance-statistics-overlay.html'], function(angular, template) {\n  'use strict';\n\n  var Configuration = function PluginConfiguration(ViewsProvider) {\n\n    ViewsProvider.registerDefaultView('cockpit.processInstance.diagram.overlay', {\n      id: 'activity-instance-statistics-overlay',\n      template: template,\n      controller: [\n               '$scope',\n      function ($scope) {\n        var bpmnElement = $scope.bpmnElement,\n            processData = $scope.processData.newChild($scope);\n\n        $scope.activityInstanceStatistics = processData.observe([ 'activityIdToInstancesMap', 'activityIdToIncidentsMap'],\n          function(activityIdToInstancesMap, activityIdToIncidentsMap) {\n\n            var activityId = bpmnElement.id,\n                instances = activityIdToInstancesMap[activityId] || [],\n                incidents = activityIdToIncidentsMap[activityId] || [];\n\n            if (instances.length || incidents.length) {\n              bpmnElement.isSelectable = true;\n            }\n\n            $scope.activityInstanceStatistics = { instances: instances, incidents: incidents };\n        });\n\n        var currentFilter = processData.observe('filter', function(filter) {\n          currentFilter = filter;\n        });\n\n        $scope.selectRunningInstances = function(e) {\n          var newFilter = angular.copy(currentFilter),\n              ctrl = e.ctrlKey,\n              activityId = bpmnElement.id,\n              activityIds = angular.copy(newFilter.activityIds) || [],\n              idx = activityIds.indexOf(activityId),\n              selected = idx !== -1;\n\n          if (!activityId) {\n            activityIds = null;\n\n          } else {\n\n            if (ctrl) {\n              if (selected) {\n                activityIds.splice(idx, 1);\n\n              } else {\n                activityIds.push(activityId);\n              }\n\n            } else {\n              activityIds = [ activityId ];\n            }\n          }\n\n          newFilter.activityIds = activityIds;\n\n          processData.set('filter', newFilter);\n        };\n\n      }],\n      priority: 20\n    });\n  };\n\n  Configuration.$inject = ['ViewsProvider'];\n\n  return Configuration;\n});\n\n","/* global define: false */\n\n/**\n * @namespace cam.cockpit.plugin.base.views\n */\ndefine('base/app/views/main',[\n  'angular',\n\n  // dashboard\n  './dashboard/process-definitions',\n\n  // process definition\n  './processDefinition/processInstanceTable',\n  './processDefinition/calledProcessDefinitionTable',\n  './processDefinition/updateSuspensionStateAction',\n  './processDefinition/updateSuspensionStateDialog',\n  './processDefinition/activityInstanceStatisticsOverlay',\n\n  // process instance\n  './processInstance/variableInstancesTab',\n  './processInstance/variableInstanceUploadDialog',\n  './processInstance/variableInstanceInspectDialog',\n  './processInstance/incidentsTab',\n  './processInstance/calledProcessInstanceTable',\n  './processInstance/userTasksTable',\n  './processInstance/jobRetryBulkAction',\n  './processInstance/jobRetryBulkDialog',\n  './processInstance/jobRetryDialog',\n  './processInstance/cancelProcessInstanceAction',\n  './processInstance/cancelProcessInstanceDialog',\n  './processInstance/addVariableAction',\n  './processInstance/addVariableDialog',\n  './processInstance/updateSuspensionStateAction',\n  './processInstance/updateSuspensionStateDialog',\n  './processInstance/activityInstanceStatisticsOverlay'\n], function(\n  angular,\n\n  // dashboard\n  processDefinitions,\n\n  // process definition\n  processInstanceTable,\n  calledProcessDefinitionTable,\n  updateSuspensionStateAction,\n  updateSuspensionStateDialog,\n  activityInstanceStatisticsOverlay,\n\n  // process instance\n  variableInstancesTab,\n  variableInstanceUploadDialog,\n  variableInstanceInspectDialog,\n  incidentsTab,\n  calledProcessInstanceTable,\n  userTasksTable,\n  jobRetryBulkAction,\n  jobRetryBulkDialog,\n  jobRetryDialog,\n  cancelProcessInstanceAction,\n  cancelProcessInstanceDialog,\n  addVariableAction,\n  addVariableDialog,\n  updateSuspensionStateActionPI,\n  updateSuspensionStateDialogPI,\n  activityInstanceStatisticsOverlayPI) {\n  'use strict';\n  var ngModule = angular.module('cockpit.plugin.base.views', []);\n\n  ngModule.config(processDefinitions);\n\n  ngModule.config(processInstanceTable);\n  ngModule.config(calledProcessDefinitionTable);\n  ngModule.config(updateSuspensionStateAction);\n  ngModule.controller('UpdateProcessDefinitionSuspensionStateController', updateSuspensionStateDialog);\n  ngModule.config(activityInstanceStatisticsOverlay);\n\n  variableInstancesTab(ngModule);\n  ngModule.controller('VariableInstanceUploadController', variableInstanceUploadDialog);\n  ngModule.controller('VariableInstanceInspectController', variableInstanceInspectDialog);\n  ngModule.config(incidentsTab);\n  calledProcessInstanceTable(ngModule);\n  userTasksTable(ngModule);\n  jobRetryBulkAction(ngModule);\n  ngModule.controller('JobRetriesController', jobRetryBulkDialog);\n  ngModule.controller('JobRetryController', jobRetryDialog);\n  cancelProcessInstanceAction(ngModule);\n  ngModule.controller('CancelProcessInstanceController', cancelProcessInstanceDialog);\n  ngModule.config(addVariableAction);\n  ngModule.controller('AddVariableController', addVariableDialog);\n  ngModule.config(updateSuspensionStateActionPI);\n  ngModule.controller('UpdateProcessInstanceSuspensionStateController', updateSuspensionStateDialogPI);\n  ngModule.config(activityInstanceStatisticsOverlayPI);\n\n  return ngModule;\n});\n\n","define('base/app/resources/processDefinition',[], function() {\n\n  return ['$resource', 'Uri', function ($resource, Uri) {\n    return $resource(Uri.appUri('plugin://base/:engine/process-definition/:id/:action'), { id: '@id' }, {\n      getCalledProcessDefinitions: { method: 'POST', isArray: true, params: {action: 'called-process-definitions'}}\n    });\n  }];\n\n});\n\n","/* global define: false */\ndefine('base/app/resources/processInstance',[], function() {\n  'use strict';\n\n  return [\n    '$resource',\n    'Uri',\n  function ($resource, Uri) {\n\n    return $resource(Uri.appUri('plugin://base/:engine/process-instance/:id/:action'), {id: '@id'}, {\n      query: {\n        method: 'POST',\n        isArray: true\n      },\n\n      delete: {\n        url: Uri.appUri('engine://engine/:engine/process-instance/:id'),\n        method: 'DELETE'\n      },\n\n      count: {\n        method: 'POST',\n        isArray: false,\n        params: { id: 'count' }\n      },\n\n      processInstances: {\n        method: 'POST',\n        isArray: true,\n        params: {\n          action: 'called-process-instances'\n        }\n      },\n\n      // deprecated\n      getCalledProcessInstances: {\n        method: 'POST',\n        isArray: true,\n        params: {\n          action: 'called-process-instances'\n        }\n      }\n    });\n  }];\n});\n\n","define('base/app/resources/main',['angular',\n       './processDefinition',\n       './processInstance'],\nfunction(angular,\n         processDefinition,\n         processInstance) {\n  var ngModule = angular.module('cockpit.plugin.base.resources', []);\n\n  ngModule.factory('PluginProcessDefinitionResource', processDefinition);\n  ngModule.factory('PluginProcessInstanceResource', processInstance);\n\n  return ngModule;\n});\n\n","define('base/app/data/dashboard/processDefinitionStatisticsData',['angular'], function(angular) {\n\n  var Controller = [ '$scope', 'processData', 'ProcessDefinitionResource',\n      function ($scope, processData, ProcessDefinitionResource) {\n\n        processData.provide('processDefinitions', function () {\n          return ProcessDefinitionResource.queryStatistics({ incidents: true }).$promise;\n        });\n\n        processData.provide('processDefinitionStatistics', ['processDefinitions', function(processDefinitions) {\n          return aggregateStatistics(processDefinitions);\n        }]);\n\n        /**\n         * Returns an aggregated list over the statistics.\n         *\n         * Summarize the statistics of process definitions\n         * which have the same process definition key to\n         * one item. This item contains the latest process\n         * definition name (if there does not exist a name\n         * the process definition key will be used as the\n         * process definition name).\n         *\n         * Furthermore, the number of instances, failed jobs\n         * and incidents will be aggregated over all versions\n         * of a process definition key.\n         *\n         */\n        var aggregateStatistics = function(statistics) {\n          // represents a map which contains to definition key\n          // the corresponding statistics.\n          var statisticsResult = [];\n          // the result to return\n          var result = [];\n\n          // iterate over assigned statistics\n          angular.forEach(statistics, function (currentStatistic) {\n            // get the statistic to the definition key of the current item\n            var statistic = statisticsResult[currentStatistic.definition.key];\n\n            if (!statistic) {\n              // if there does not exists a statistic to the definition key\n              // then create a copy of the current item (currentStatistic).\n              statistic = angular.copy(currentStatistic);\n\n              if (!statistic.definition.name) {\n                // if there does not exist a name then set definition key\n                // as the name of the definition.\n                statistic.definition.name = statistic.definition.key;\n              }\n\n              // put the statistic into the map of statistics\n              statisticsResult[statistic.definition.key] = statistic;\n\n              // add the statistic to the result set\n              result.push(statistic);\n\n            } else {\n              // First save the values of instances, failedJobs and incidents.\n              var currentInstances = statistic.instances;\n              var currentFailedJobs = statistics.failedJobs;\n              var currentIncidents = angular.copy(statistic.incidents);\n\n              if (currentStatistic.definition.version > statistic.definition.version) {\n                // if the version of the current statistic, then create copy from them.\n                angular.copy(currentStatistic, statistic);\n\n                if (!statistic.definition.name) {\n                  // if there does not exist a name then set definition key\n                  // as the name of the definition.\n                  statistic.definition.name = statistic.definition.key;\n                }\n              }\n\n              // Add the saved values to the corresponding values of the current statistic\n              statistic.instances = currentInstances + currentStatistic.instances;\n              statistic.failedJobs = currentFailedJobs + currentStatistic.failedJobs;\n\n              angular.forEach(currentIncidents, function (incident) {\n                var incidentType = incident.incidentType;\n                var incidentCount = incident.incidentCount;\n\n                var newIncident = true;\n                for(var i = 0; i < statistic.incidents.length; i++) {\n                  var statisticIncident = statistic.incidents[i];\n                  if (statisticIncident.incidentType == incidentType) {\n                    statisticIncident.incidentCount = incidentCount + statisticIncident.incidentCount;\n                    newIncident = false;\n                  }\n                }\n\n                if (!!newIncident) {\n                  // merge the incidents\n                  statistic.incidents.push(incident);\n                }\n\n              });\n\n            }\n          });\n\n          return result;\n        };\n\n  }];\n\n  var Configuration = function PluginConfiguration(DataProvider) {\n\n    DataProvider.registerData('cockpit.dashboard.data', {\n      id: 'process-definition-statistics-data',\n      controller: Controller\n    });\n  };\n\n  Configuration.$inject = ['DataProvider'];\n\n  return Configuration;\n});\n\n","define('base/app/data/processDefinition/activityInstanceStatisticsData',[], function() {\n\n  var Controller = [ '$scope', 'processData', 'ProcessDefinitionResource',\n      function ($scope, processData, ProcessDefinitionResource) {\n\n        processData.provide('activityInstanceStatistics', ['processDefinition', function (processDefinition) {\n          return ProcessDefinitionResource.queryActivityStatistics({ id : processDefinition.id, incidents: true }).$promise;\n        }]);\n\n  }];\n\n  var Configuration = function PluginConfiguration(DataProvider) {\n\n    DataProvider.registerData('cockpit.processDefinition.data', {\n      id: 'activity-instance-statistics-data',\n      controller: Controller\n    });\n  };\n\n  Configuration.$inject = ['DataProvider'];\n\n  return Configuration;\n});\n\n","define('base/app/data/main',['angular',\n        './dashboard/processDefinitionStatisticsData',\n        './processDefinition/activityInstanceStatisticsData'],\nfunction(angular, processDefinition, activityInstance) {\n\n  var ngModule = angular.module('cockpit.plugin.base.data', []);\n\n  ngModule.config(processDefinition);\n  ngModule.config(activityInstance);\n\n  return ngModule;\n});\n\n","/* global define: false */\n\n/**\n * @namespace cam.cockpit.plugin\n */\n\n/**\n * @namespace cam.cockpit.plugin.base\n */\ndefine('base/app/plugin',['angular',\n        './views/main',\n        './resources/main',\n        './data/main'\n], function(angular, viewsModule, resourcesModule, dataModule) {\n  return angular.module('cockpit.plugin.base', [viewsModule.name, resourcesModule.name, dataModule.name]);\n});\n\n"]}